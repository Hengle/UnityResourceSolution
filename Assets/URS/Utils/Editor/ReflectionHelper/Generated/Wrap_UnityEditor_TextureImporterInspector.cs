//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_TextureImporterInspector
	{
		
		/// <summary>
		/// <see cref="UnityEditor.TextureImporterInspector"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.TextureImporterInspector");
		
		public delegate void GUIMethod(object guiElements);
		
		public UnityEditor.TextureImporterType textureType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.TextureImporterType)(__textureType?.GetValue(__self__));
		}
		
		public bool textureTypeHasMultipleDifferentValues
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__textureTypeHasMultipleDifferentValues?.GetValue(__self__));
		}
		
		public bool showImportedObject
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__showImportedObject?.GetValue(__self__));
		}
		
		public object textureInspector
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__textureInspector?.GetValue(__self__));
		}
		
		public UnityEditor.SpriteImportMode spriteImportMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SpriteImportMode)(__spriteImportMode?.GetValue(__self__));
		}
		
		public static string s_DefaultPlatformName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__s_DefaultPlatformName?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_DefaultPlatformName?.SetValue(null, value);
		}
		
		public UnityEditor.SerializedProperty m_TextureType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TextureType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureType?.SetValue(__self__, value);
		}
		
		public System.Collections.IDictionary m_GUIElementMethods
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (System.Collections.IDictionary)(__m_GUIElementMethods?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_GUIElementMethods?.SetValue(__self__, value);
		}
		
		public System.Collections.IList m_PlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (System.Collections.IList)(__m_PlatformSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_PlatformSettings?.SetValue(__self__, value);
		}
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public UnityEditor_TextureImportPlatformSettings m_PlatformSettings__GetItem(int i) => new UnityEditor_TextureImportPlatformSettings(m_PlatformSettings?[i]);
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public void m_PlatformSettings__SetItem(int i, UnityEditor_TextureImportPlatformSettings value)
		{
			var __list__ = m_PlatformSettings;
			if (__list__ == null) return;
			__list__[i] = value.__self__;
		}
		
		public static UnityEditor.TextureImporterFormat[] kFormatsWithCompressionSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.TextureImporterFormat[])(__kFormatsWithCompressionSettings?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kFormatsWithCompressionSettings?.SetValue(null, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowBumpGenerationSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowBumpGenerationSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowBumpGenerationSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowCubeMapSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowCubeMapSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowCubeMapSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowElementsAtlasSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowElementsAtlasSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowElementsAtlasSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowGenericSpriteSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowGenericSpriteSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowGenericSpriteSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowMipMapSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowMipMapSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowMipMapSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.AnimatedValues.AnimBool m_ShowSpriteMeshTypeOption
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AnimatedValues.AnimBool)(__m_ShowSpriteMeshTypeOption?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowSpriteMeshTypeOption?.SetValue(__self__, value);
		}
		
		public UnityEngine.GUIContent m_EmptyContent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.GUIContent)(__m_EmptyContent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EmptyContent?.SetValue(__self__, value);
		}
		
		public int[] m_FilterModeOptions
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int[])(__m_FilterModeOptions?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FilterModeOptions?.SetValue(__self__, value);
		}
		
		public string m_ImportWarning
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_ImportWarning?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ImportWarning?.SetValue(__self__, value);
		}
		
		public static object s_Styles
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__s_Styles?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_Styles?.SetValue(null, value);
		}
		
		public Array m_TextureTypeGUIElements
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (Array)(__m_TextureTypeGUIElements?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureTypeGUIElements?.SetValue(__self__, value);
		}
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public object m_TextureTypeGUIElements__GetItem(int i) => (object)(m_TextureTypeGUIElements?.GetValue(i));
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public void m_TextureTypeGUIElements__SetItem(int i, object value) => m_TextureTypeGUIElements?.SetValue(value, i);
		
		public System.Collections.IList m_GUIElementsDisplayOrder
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (System.Collections.IList)(__m_GUIElementsDisplayOrder?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_GUIElementsDisplayOrder?.SetValue(__self__, value);
		}
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public object m_GUIElementsDisplayOrder__GetItem(int i) => (object)(m_GUIElementsDisplayOrder?[i]);
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public void m_GUIElementsDisplayOrder__SetItem(int i, object value)
		{
			var __list__ = m_GUIElementsDisplayOrder;
			if (__list__ == null) return;
			__list__[i] = value;
		}
		
		public UnityEditor.SerializedProperty m_AlphaSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AlphaSource?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AlphaSource?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ConvertToNormalMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ConvertToNormalMap?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ConvertToNormalMap?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_HeightScale
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_HeightScale?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_HeightScale?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_NormalMapFilter
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_NormalMapFilter?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_NormalMapFilter?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_GenerateCubemap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_GenerateCubemap?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_GenerateCubemap?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_CubemapConvolution
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_CubemapConvolution?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CubemapConvolution?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SeamlessCubemap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SeamlessCubemap?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SeamlessCubemap?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_BorderMipMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_BorderMipMap?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_BorderMipMap?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MipMapsPreserveCoverage
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MipMapsPreserveCoverage?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MipMapsPreserveCoverage?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AlphaTestReferenceValue
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AlphaTestReferenceValue?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AlphaTestReferenceValue?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_NPOTScale
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_NPOTScale?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_NPOTScale?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_IsReadable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_IsReadable?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_IsReadable?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_StreamingMipmaps
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_StreamingMipmaps?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_StreamingMipmaps?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_StreamingMipmapsPriority
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_StreamingMipmapsPriority?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_StreamingMipmapsPriority?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_VTOnly
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_VTOnly?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_VTOnly?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_sRGBTexture
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_sRGBTexture?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_sRGBTexture?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_EnableMipMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_EnableMipMap?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EnableMipMap?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MipMapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MipMapMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MipMapMode?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_FadeOut
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_FadeOut?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FadeOut?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MipMapFadeDistanceStart
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MipMapFadeDistanceStart?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MipMapFadeDistanceStart?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MipMapFadeDistanceEnd
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MipMapFadeDistanceEnd?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MipMapFadeDistanceEnd?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Aniso
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Aniso?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Aniso?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_FilterMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_FilterMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FilterMode?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_WrapU
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_WrapU?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_WrapU?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_WrapV
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_WrapV?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_WrapV?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_WrapW
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_WrapW?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_WrapW?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpritePackingTag
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpritePackingTag?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpritePackingTag?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpritePixelsToUnits
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpritePixelsToUnits?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpritePixelsToUnits?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpriteExtrude
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpriteExtrude?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpriteExtrude?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpriteMeshType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpriteMeshType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpriteMeshType?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Alignment
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Alignment?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Alignment?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpritePivot
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpritePivot?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpritePivot?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpriteGenerateFallbackPhysicsShape
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpriteGenerateFallbackPhysicsShape?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpriteGenerateFallbackPhysicsShape?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AlphaIsTransparency
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AlphaIsTransparency?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AlphaIsTransparency?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_IgnorePngGamma
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_IgnorePngGamma?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_IgnorePngGamma?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_PSDRemoveMatte
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_PSDRemoveMatte?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_PSDRemoveMatte?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_TextureShape
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TextureShape?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureShape?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SpriteMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SpriteMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SpriteMode?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_FlipbookRows
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_FlipbookRows?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FlipbookRows?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_FlipbookColumns
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_FlipbookColumns?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FlipbookColumns?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SingleChannelComponent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SingleChannelComponent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SingleChannelComponent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_CookieLightType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_CookieLightType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CookieLightType?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_PlatformSettingsArrProp
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_PlatformSettingsArrProp?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_PlatformSettingsArrProp?.SetValue(__self__, value);
		}
		
		public System.Collections.Generic.List<UnityEditor.TextureImporterType> m_TextureTypes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (System.Collections.Generic.List<UnityEditor.TextureImporterType>)(__m_TextureTypes?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureTypes?.SetValue(__self__, value);
		}
		
		public bool m_ShowAdvanced
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_ShowAdvanced?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowAdvanced?.SetValue(__self__, value);
		}
		
		public int m_TextureWidth
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__m_TextureWidth?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureWidth?.SetValue(__self__, value);
		}
		
		public int m_TextureHeight
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__m_TextureHeight?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureHeight?.SetValue(__self__, value);
		}
		
		public bool m_IsPOT
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_IsPOT?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_IsPOT?.SetValue(__self__, value);
		}
		
		public bool m_ShowPerAxisWrapModes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_ShowPerAxisWrapModes?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowPerAxisWrapModes?.SetValue(__self__, value);
		}
		
		public void OnDisable()
		{
			__OnDisable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public static bool IsCompressedDXTTextureFormat(UnityEditor.TextureImporterFormat format)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = format;
			var __result__ = __IsCompressedDXTTextureFormat?.Invoke(null, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void UpdateImportWarning()
		{
			__UpdateImportWarning?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void ToggleFromInt(UnityEditor.SerializedProperty property, UnityEngine.GUIContent label)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = property;
			__params__[1] = label;
			__ToggleFromInt?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void EnumPopup(UnityEditor.SerializedProperty property, System.Type type, UnityEngine.GUIContent label)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = property;
			__params__[1] = type;
			__params__[2] = label;
			__EnumPopup?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void CacheSerializedProperties()
		{
			__CacheSerializedProperties?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void InitializeGUI()
		{
			__InitializeGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnEnable()
		{
			__OnEnable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void SetSerializedPropertySettings(UnityEditor.TextureImporterSettings settings)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = settings;
			__SetSerializedPropertySettings?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor.TextureImporterSettings GetSerializedPropertySettings()
		{
			var __result__ = __GetSerializedPropertySettings?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (UnityEditor.TextureImporterSettings)(__result__) : default;
		}
		
		public UnityEditor.TextureImporterSettings GetSerializedPropertySettings(UnityEditor.TextureImporterSettings settings)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = settings;
			var __result__ = __GetSerializedPropertySettings__2?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (UnityEditor.TextureImporterSettings)(__result__) : default;
		}
		
		public void CookieGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__CookieGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void CubemapMappingGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__CubemapMappingGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ElementsAtlasGui(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__ElementsAtlasGui?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ColorSpaceGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__ColorSpaceGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void POTScaleGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__POTScaleGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ReadableGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__ReadableGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void StreamingMipmapsGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__StreamingMipmapsGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void VTOnlyGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__VTOnlyGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void AlphaHandlingGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__AlphaHandlingGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public bool ShouldShowSpriteMeshTypeOption()
		{
			var __result__ = __ShouldShowSpriteMeshTypeOption?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void SpriteGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__SpriteGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void MipMapGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__MipMapGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void PngGammaGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__PngGammaGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void BumpGUI(object guiElements)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__BumpGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public bool TargetsHaveNPOTTextures()
		{
			var __result__ = __TargetsHaveNPOTTextures?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void TextureSettingsGUI()
		{
			__TextureSettingsGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnInspectorGUI()
		{
			__OnInspectorGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool ShouldDisplayGUIElement(object guiElements, object guiElement)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__params__[1] = guiElement;
			var __result__ = __ShouldDisplayGUIElement?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void DoGUIElements(object guiElements, System.Collections.IList guiElementsDisplayOrder)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = guiElements;
			__params__[1] = guiElementsDisplayOrder;
			__DoGUIElements?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public static bool CountImportersWithAlpha(UnityEngine.Object[] importers, out int count)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = importers;
			__params__[1] = null;
			var __result__ = __CountImportersWithAlpha?.Invoke(null, __params__);
			count = (int)(__params__[1]);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public static bool CountImportersWithHDR(UnityEngine.Object[] importers, out int count)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = importers;
			__params__[1] = null;
			var __result__ = __CountImportersWithHDR?.Invoke(null, __params__);
			count = (int)(__params__[1]);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void SetCookieLightTypeDefaults(object cookieLightType)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = cookieLightType;
			__SetCookieLightTypeDefaults?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public static string[] BuildTextureStrings(int[] texFormatValues)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = texFormatValues;
			var __result__ = __BuildTextureStrings?.Invoke(null, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (string[])(__result__) : default;
		}
		
		public static bool IsFormatRequireCompressionSetting(UnityEditor.TextureImporterFormat format)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = format;
			var __result__ = __IsFormatRequireCompressionSetting?.Invoke(null, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public static bool IsPowerOfTwo(int f)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = f;
			var __result__ = __IsPowerOfTwo?.Invoke(null, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public bool ShouldShowWarningForReadWrite()
		{
			var __result__ = __ShouldShowWarningForReadWrite?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void BuildTargetList()
		{
			__BuildTargetList?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool HasModified()
		{
			var __result__ = __HasModified?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void ResetValues()
		{
			__ResetValues?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void Apply()
		{
			__Apply?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void DrawPreview(UnityEngine.Rect previewArea)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = previewArea;
			__DrawPreview?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void RefreshPreviewChannelSelection()
		{
			__RefreshPreviewChannelSelection?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public UnityEditor_TextureImporterInspector(object __self__) => this.__self__ = __self__ as UnityEngine.Object;
		public UnityEngine.Object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		public UnityEditor.AssetImporters.AssetImporterEditor __super__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.AssetImporters.AssetImporterEditor)(__self__);
		}
		
		private static FieldInfo ___s_DefaultPlatformName;
		private static FieldInfo __s_DefaultPlatformName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_DefaultPlatformName ??= __type__?.GetField("s_DefaultPlatformName", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureType;
		private static FieldInfo __m_TextureType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureType ??= __type__?.GetField("m_TextureType", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_GUIElementMethods;
		private static FieldInfo __m_GUIElementMethods
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_GUIElementMethods ??= __type__?.GetField("m_GUIElementMethods", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_PlatformSettings;
		private static FieldInfo __m_PlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_PlatformSettings ??= __type__?.GetField("m_PlatformSettings", (BindingFlags)(-1));
		}
		
		private static Type ___E__m_PlatformSettings;
		public static Type __E__m_PlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___E__m_PlatformSettings ??= EditorUtils.GetTypeByFullName("UnityEditor.TextureImportPlatformSettings");
		}
		
		private static FieldInfo ___kFormatsWithCompressionSettings;
		private static FieldInfo __kFormatsWithCompressionSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kFormatsWithCompressionSettings ??= __type__?.GetField("kFormatsWithCompressionSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowBumpGenerationSettings;
		private static FieldInfo __m_ShowBumpGenerationSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowBumpGenerationSettings ??= __type__?.GetField("m_ShowBumpGenerationSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowCubeMapSettings;
		private static FieldInfo __m_ShowCubeMapSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowCubeMapSettings ??= __type__?.GetField("m_ShowCubeMapSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowElementsAtlasSettings;
		private static FieldInfo __m_ShowElementsAtlasSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowElementsAtlasSettings ??= __type__?.GetField("m_ShowElementsAtlasSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowGenericSpriteSettings;
		private static FieldInfo __m_ShowGenericSpriteSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowGenericSpriteSettings ??= __type__?.GetField("m_ShowGenericSpriteSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowMipMapSettings;
		private static FieldInfo __m_ShowMipMapSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowMipMapSettings ??= __type__?.GetField("m_ShowMipMapSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowSpriteMeshTypeOption;
		private static FieldInfo __m_ShowSpriteMeshTypeOption
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowSpriteMeshTypeOption ??= __type__?.GetField("m_ShowSpriteMeshTypeOption", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EmptyContent;
		private static FieldInfo __m_EmptyContent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EmptyContent ??= __type__?.GetField("m_EmptyContent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FilterModeOptions;
		private static FieldInfo __m_FilterModeOptions
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FilterModeOptions ??= __type__?.GetField("m_FilterModeOptions", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ImportWarning;
		private static FieldInfo __m_ImportWarning
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ImportWarning ??= __type__?.GetField("m_ImportWarning", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_Styles;
		private static FieldInfo __s_Styles
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_Styles ??= __type__?.GetField("s_Styles", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureTypeGUIElements;
		private static FieldInfo __m_TextureTypeGUIElements
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureTypeGUIElements ??= __type__?.GetField("m_TextureTypeGUIElements", (BindingFlags)(-1));
		}
		
		private static Type ___E__m_TextureTypeGUIElements;
		public static Type __E__m_TextureTypeGUIElements
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___E__m_TextureTypeGUIElements ??= EditorUtils.GetTypeByFullName("UnityEditor.TextureImporterInspector+TextureInspectorTypeGUIProperties");
		}
		
		private static FieldInfo ___m_GUIElementsDisplayOrder;
		private static FieldInfo __m_GUIElementsDisplayOrder
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_GUIElementsDisplayOrder ??= __type__?.GetField("m_GUIElementsDisplayOrder", (BindingFlags)(-1));
		}
		
		private static Type ___E__m_GUIElementsDisplayOrder;
		public static Type __E__m_GUIElementsDisplayOrder
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___E__m_GUIElementsDisplayOrder ??= EditorUtils.GetTypeByFullName("UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static FieldInfo ___m_AlphaSource;
		private static FieldInfo __m_AlphaSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AlphaSource ??= __type__?.GetField("m_AlphaSource", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ConvertToNormalMap;
		private static FieldInfo __m_ConvertToNormalMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ConvertToNormalMap ??= __type__?.GetField("m_ConvertToNormalMap", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_HeightScale;
		private static FieldInfo __m_HeightScale
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_HeightScale ??= __type__?.GetField("m_HeightScale", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_NormalMapFilter;
		private static FieldInfo __m_NormalMapFilter
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_NormalMapFilter ??= __type__?.GetField("m_NormalMapFilter", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_GenerateCubemap;
		private static FieldInfo __m_GenerateCubemap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_GenerateCubemap ??= __type__?.GetField("m_GenerateCubemap", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CubemapConvolution;
		private static FieldInfo __m_CubemapConvolution
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CubemapConvolution ??= __type__?.GetField("m_CubemapConvolution", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SeamlessCubemap;
		private static FieldInfo __m_SeamlessCubemap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SeamlessCubemap ??= __type__?.GetField("m_SeamlessCubemap", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_BorderMipMap;
		private static FieldInfo __m_BorderMipMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_BorderMipMap ??= __type__?.GetField("m_BorderMipMap", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MipMapsPreserveCoverage;
		private static FieldInfo __m_MipMapsPreserveCoverage
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MipMapsPreserveCoverage ??= __type__?.GetField("m_MipMapsPreserveCoverage", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AlphaTestReferenceValue;
		private static FieldInfo __m_AlphaTestReferenceValue
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AlphaTestReferenceValue ??= __type__?.GetField("m_AlphaTestReferenceValue", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_NPOTScale;
		private static FieldInfo __m_NPOTScale
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_NPOTScale ??= __type__?.GetField("m_NPOTScale", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_IsReadable;
		private static FieldInfo __m_IsReadable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_IsReadable ??= __type__?.GetField("m_IsReadable", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_StreamingMipmaps;
		private static FieldInfo __m_StreamingMipmaps
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_StreamingMipmaps ??= __type__?.GetField("m_StreamingMipmaps", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_StreamingMipmapsPriority;
		private static FieldInfo __m_StreamingMipmapsPriority
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_StreamingMipmapsPriority ??= __type__?.GetField("m_StreamingMipmapsPriority", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_VTOnly;
		private static FieldInfo __m_VTOnly
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_VTOnly ??= __type__?.GetField("m_VTOnly", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_sRGBTexture;
		private static FieldInfo __m_sRGBTexture
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_sRGBTexture ??= __type__?.GetField("m_sRGBTexture", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EnableMipMap;
		private static FieldInfo __m_EnableMipMap
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EnableMipMap ??= __type__?.GetField("m_EnableMipMap", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MipMapMode;
		private static FieldInfo __m_MipMapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MipMapMode ??= __type__?.GetField("m_MipMapMode", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FadeOut;
		private static FieldInfo __m_FadeOut
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FadeOut ??= __type__?.GetField("m_FadeOut", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MipMapFadeDistanceStart;
		private static FieldInfo __m_MipMapFadeDistanceStart
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MipMapFadeDistanceStart ??= __type__?.GetField("m_MipMapFadeDistanceStart", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MipMapFadeDistanceEnd;
		private static FieldInfo __m_MipMapFadeDistanceEnd
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MipMapFadeDistanceEnd ??= __type__?.GetField("m_MipMapFadeDistanceEnd", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Aniso;
		private static FieldInfo __m_Aniso
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Aniso ??= __type__?.GetField("m_Aniso", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FilterMode;
		private static FieldInfo __m_FilterMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FilterMode ??= __type__?.GetField("m_FilterMode", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_WrapU;
		private static FieldInfo __m_WrapU
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_WrapU ??= __type__?.GetField("m_WrapU", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_WrapV;
		private static FieldInfo __m_WrapV
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_WrapV ??= __type__?.GetField("m_WrapV", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_WrapW;
		private static FieldInfo __m_WrapW
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_WrapW ??= __type__?.GetField("m_WrapW", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpritePackingTag;
		private static FieldInfo __m_SpritePackingTag
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpritePackingTag ??= __type__?.GetField("m_SpritePackingTag", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpritePixelsToUnits;
		private static FieldInfo __m_SpritePixelsToUnits
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpritePixelsToUnits ??= __type__?.GetField("m_SpritePixelsToUnits", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpriteExtrude;
		private static FieldInfo __m_SpriteExtrude
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpriteExtrude ??= __type__?.GetField("m_SpriteExtrude", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpriteMeshType;
		private static FieldInfo __m_SpriteMeshType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpriteMeshType ??= __type__?.GetField("m_SpriteMeshType", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Alignment;
		private static FieldInfo __m_Alignment
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Alignment ??= __type__?.GetField("m_Alignment", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpritePivot;
		private static FieldInfo __m_SpritePivot
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpritePivot ??= __type__?.GetField("m_SpritePivot", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpriteGenerateFallbackPhysicsShape;
		private static FieldInfo __m_SpriteGenerateFallbackPhysicsShape
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpriteGenerateFallbackPhysicsShape ??= __type__?.GetField("m_SpriteGenerateFallbackPhysicsShape", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AlphaIsTransparency;
		private static FieldInfo __m_AlphaIsTransparency
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AlphaIsTransparency ??= __type__?.GetField("m_AlphaIsTransparency", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_IgnorePngGamma;
		private static FieldInfo __m_IgnorePngGamma
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_IgnorePngGamma ??= __type__?.GetField("m_IgnorePngGamma", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_PSDRemoveMatte;
		private static FieldInfo __m_PSDRemoveMatte
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_PSDRemoveMatte ??= __type__?.GetField("m_PSDRemoveMatte", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureShape;
		private static FieldInfo __m_TextureShape
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureShape ??= __type__?.GetField("m_TextureShape", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SpriteMode;
		private static FieldInfo __m_SpriteMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SpriteMode ??= __type__?.GetField("m_SpriteMode", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FlipbookRows;
		private static FieldInfo __m_FlipbookRows
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FlipbookRows ??= __type__?.GetField("m_FlipbookRows", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FlipbookColumns;
		private static FieldInfo __m_FlipbookColumns
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FlipbookColumns ??= __type__?.GetField("m_FlipbookColumns", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SingleChannelComponent;
		private static FieldInfo __m_SingleChannelComponent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SingleChannelComponent ??= __type__?.GetField("m_SingleChannelComponent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CookieLightType;
		private static FieldInfo __m_CookieLightType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CookieLightType ??= __type__?.GetField("m_CookieLightType", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_PlatformSettingsArrProp;
		private static FieldInfo __m_PlatformSettingsArrProp
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_PlatformSettingsArrProp ??= __type__?.GetField("m_PlatformSettingsArrProp", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureTypes;
		private static FieldInfo __m_TextureTypes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureTypes ??= __type__?.GetField("m_TextureTypes", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowAdvanced;
		private static FieldInfo __m_ShowAdvanced
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowAdvanced ??= __type__?.GetField("m_ShowAdvanced", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureWidth;
		private static FieldInfo __m_TextureWidth
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureWidth ??= __type__?.GetField("m_TextureWidth", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureHeight;
		private static FieldInfo __m_TextureHeight
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureHeight ??= __type__?.GetField("m_TextureHeight", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_IsPOT;
		private static FieldInfo __m_IsPOT
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_IsPOT ??= __type__?.GetField("m_IsPOT", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowPerAxisWrapModes;
		private static FieldInfo __m_ShowPerAxisWrapModes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowPerAxisWrapModes ??= __type__?.GetField("m_ShowPerAxisWrapModes", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureType;
		private static PropertyInfo __textureType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureType ??= __type__?.GetProperty("textureType", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureTypeHasMultipleDifferentValues;
		private static PropertyInfo __textureTypeHasMultipleDifferentValues
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureTypeHasMultipleDifferentValues ??= __type__?.GetProperty("textureTypeHasMultipleDifferentValues", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___showImportedObject;
		private static PropertyInfo __showImportedObject
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___showImportedObject ??= __type__?.GetProperty("showImportedObject", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureInspector;
		private static PropertyInfo __textureInspector
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureInspector ??= __type__?.GetProperty("textureInspector", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___spriteImportMode;
		private static PropertyInfo __spriteImportMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___spriteImportMode ??= __type__?.GetProperty("spriteImportMode", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___OnDisable;
		private static MethodInfo __OnDisable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnDisable ??= __type__?.GetMethodInfoByParameterTypeNames("OnDisable");
		}
		
		private static MethodInfo ___IsCompressedDXTTextureFormat;
		private static MethodInfo __IsCompressedDXTTextureFormat
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___IsCompressedDXTTextureFormat ??= __type__?.GetMethodInfoByParameterTypeNames("IsCompressedDXTTextureFormat", "UnityEditor.TextureImporterFormat");
		}
		
		private static MethodInfo ___UpdateImportWarning;
		private static MethodInfo __UpdateImportWarning
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___UpdateImportWarning ??= __type__?.GetMethodInfoByParameterTypeNames("UpdateImportWarning");
		}
		
		private static MethodInfo ___ToggleFromInt;
		private static MethodInfo __ToggleFromInt
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ToggleFromInt ??= __type__?.GetMethodInfoByParameterTypeNames("ToggleFromInt", "UnityEditor.SerializedProperty", "UnityEngine.GUIContent");
		}
		
		private static MethodInfo ___EnumPopup;
		private static MethodInfo __EnumPopup
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EnumPopup ??= __type__?.GetMethodInfoByParameterTypeNames("EnumPopup", "UnityEditor.SerializedProperty", "System.Type", "UnityEngine.GUIContent");
		}
		
		private static MethodInfo ___CacheSerializedProperties;
		private static MethodInfo __CacheSerializedProperties
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CacheSerializedProperties ??= __type__?.GetMethodInfoByParameterTypeNames("CacheSerializedProperties");
		}
		
		private static MethodInfo ___InitializeGUI;
		private static MethodInfo __InitializeGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___InitializeGUI ??= __type__?.GetMethodInfoByParameterTypeNames("InitializeGUI");
		}
		
		private static MethodInfo ___OnEnable;
		private static MethodInfo __OnEnable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnEnable ??= __type__?.GetMethodInfoByParameterTypeNames("OnEnable");
		}
		
		private static MethodInfo ___SetSerializedPropertySettings;
		private static MethodInfo __SetSerializedPropertySettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetSerializedPropertySettings ??= __type__?.GetMethodInfoByParameterTypeNames("SetSerializedPropertySettings", "UnityEditor.TextureImporterSettings");
		}
		
		private static MethodInfo ___GetSerializedPropertySettings;
		private static MethodInfo __GetSerializedPropertySettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetSerializedPropertySettings ??= __type__?.GetMethodInfoByParameterTypeNames("GetSerializedPropertySettings");
		}
		
		private static MethodInfo ___GetSerializedPropertySettings__2;
		private static MethodInfo __GetSerializedPropertySettings__2
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetSerializedPropertySettings__2 ??= __type__?.GetMethodInfoByParameterTypeNames("GetSerializedPropertySettings", "UnityEditor.TextureImporterSettings");
		}
		
		private static MethodInfo ___CookieGUI;
		private static MethodInfo __CookieGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CookieGUI ??= __type__?.GetMethodInfoByParameterTypeNames("CookieGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___CubemapMappingGUI;
		private static MethodInfo __CubemapMappingGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CubemapMappingGUI ??= __type__?.GetMethodInfoByParameterTypeNames("CubemapMappingGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___ElementsAtlasGui;
		private static MethodInfo __ElementsAtlasGui
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ElementsAtlasGui ??= __type__?.GetMethodInfoByParameterTypeNames("ElementsAtlasGui", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___ColorSpaceGUI;
		private static MethodInfo __ColorSpaceGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ColorSpaceGUI ??= __type__?.GetMethodInfoByParameterTypeNames("ColorSpaceGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___POTScaleGUI;
		private static MethodInfo __POTScaleGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___POTScaleGUI ??= __type__?.GetMethodInfoByParameterTypeNames("POTScaleGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___ReadableGUI;
		private static MethodInfo __ReadableGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ReadableGUI ??= __type__?.GetMethodInfoByParameterTypeNames("ReadableGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___StreamingMipmapsGUI;
		private static MethodInfo __StreamingMipmapsGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___StreamingMipmapsGUI ??= __type__?.GetMethodInfoByParameterTypeNames("StreamingMipmapsGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___VTOnlyGUI;
		private static MethodInfo __VTOnlyGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___VTOnlyGUI ??= __type__?.GetMethodInfoByParameterTypeNames("VTOnlyGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___AlphaHandlingGUI;
		private static MethodInfo __AlphaHandlingGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AlphaHandlingGUI ??= __type__?.GetMethodInfoByParameterTypeNames("AlphaHandlingGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___ShouldShowSpriteMeshTypeOption;
		private static MethodInfo __ShouldShowSpriteMeshTypeOption
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ShouldShowSpriteMeshTypeOption ??= __type__?.GetMethodInfoByParameterTypeNames("ShouldShowSpriteMeshTypeOption");
		}
		
		private static MethodInfo ___SpriteGUI;
		private static MethodInfo __SpriteGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SpriteGUI ??= __type__?.GetMethodInfoByParameterTypeNames("SpriteGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___MipMapGUI;
		private static MethodInfo __MipMapGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MipMapGUI ??= __type__?.GetMethodInfoByParameterTypeNames("MipMapGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___PngGammaGUI;
		private static MethodInfo __PngGammaGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___PngGammaGUI ??= __type__?.GetMethodInfoByParameterTypeNames("PngGammaGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___BumpGUI;
		private static MethodInfo __BumpGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___BumpGUI ??= __type__?.GetMethodInfoByParameterTypeNames("BumpGUI", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___TargetsHaveNPOTTextures;
		private static MethodInfo __TargetsHaveNPOTTextures
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___TargetsHaveNPOTTextures ??= __type__?.GetMethodInfoByParameterTypeNames("TargetsHaveNPOTTextures");
		}
		
		private static MethodInfo ___TextureSettingsGUI;
		private static MethodInfo __TextureSettingsGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___TextureSettingsGUI ??= __type__?.GetMethodInfoByParameterTypeNames("TextureSettingsGUI");
		}
		
		private static MethodInfo ___OnInspectorGUI;
		private static MethodInfo __OnInspectorGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnInspectorGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnInspectorGUI");
		}
		
		private static MethodInfo ___ShouldDisplayGUIElement;
		private static MethodInfo __ShouldDisplayGUIElement
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ShouldDisplayGUIElement ??= __type__?.GetMethodInfoByParameterTypeNames("ShouldDisplayGUIElement", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement");
		}
		
		private static MethodInfo ___DoGUIElements;
		private static MethodInfo __DoGUIElements
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DoGUIElements ??= __type__?.GetMethodInfoByParameterTypeNames("DoGUIElements", "UnityEditor.TextureImporterInspector+TextureInspectorGUIElement", "System.Collections.Generic.List`1[[UnityEditor.TextureImporterInspector+TextureInspectorGUIElement, UnityEditor.CoreModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null]]");
		}
		
		private static MethodInfo ___CountImportersWithAlpha;
		private static MethodInfo __CountImportersWithAlpha
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CountImportersWithAlpha ??= __type__?.GetMethodInfoByParameterTypeNames("CountImportersWithAlpha", "UnityEngine.Object[]", "System.Int32&");
		}
		
		private static MethodInfo ___CountImportersWithHDR;
		private static MethodInfo __CountImportersWithHDR
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CountImportersWithHDR ??= __type__?.GetMethodInfoByParameterTypeNames("CountImportersWithHDR", "UnityEngine.Object[]", "System.Int32&");
		}
		
		private static MethodInfo ___SetCookieLightTypeDefaults;
		private static MethodInfo __SetCookieLightTypeDefaults
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetCookieLightTypeDefaults ??= __type__?.GetMethodInfoByParameterTypeNames("SetCookieLightTypeDefaults", "UnityEditor.TextureImporterCookieLightType");
		}
		
		private static MethodInfo ___BuildTextureStrings;
		private static MethodInfo __BuildTextureStrings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___BuildTextureStrings ??= __type__?.GetMethodInfoByParameterTypeNames("BuildTextureStrings", "System.Int32[]");
		}
		
		private static MethodInfo ___IsFormatRequireCompressionSetting;
		private static MethodInfo __IsFormatRequireCompressionSetting
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___IsFormatRequireCompressionSetting ??= __type__?.GetMethodInfoByParameterTypeNames("IsFormatRequireCompressionSetting", "UnityEditor.TextureImporterFormat");
		}
		
		private static MethodInfo ___IsPowerOfTwo;
		private static MethodInfo __IsPowerOfTwo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___IsPowerOfTwo ??= __type__?.GetMethodInfoByParameterTypeNames("IsPowerOfTwo", "System.Int32");
		}
		
		private static MethodInfo ___ShouldShowWarningForReadWrite;
		private static MethodInfo __ShouldShowWarningForReadWrite
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ShouldShowWarningForReadWrite ??= __type__?.GetMethodInfoByParameterTypeNames("ShouldShowWarningForReadWrite");
		}
		
		private static MethodInfo ___BuildTargetList;
		private static MethodInfo __BuildTargetList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___BuildTargetList ??= __type__?.GetMethodInfoByParameterTypeNames("BuildTargetList");
		}
		
		private static MethodInfo ___HasModified;
		private static MethodInfo __HasModified
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HasModified ??= __type__?.GetMethodInfoByParameterTypeNames("HasModified");
		}
		
		private static MethodInfo ___ResetValues;
		private static MethodInfo __ResetValues
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ResetValues ??= __type__?.GetMethodInfoByParameterTypeNames("ResetValues");
		}
		
		private static MethodInfo ___Apply;
		private static MethodInfo __Apply
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___Apply ??= __type__?.GetMethodInfoByParameterTypeNames("Apply");
		}
		
		private static MethodInfo ___DrawPreview;
		private static MethodInfo __DrawPreview
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DrawPreview ??= __type__?.GetMethodInfoByParameterTypeNames("DrawPreview", "UnityEngine.Rect");
		}
		
		private static MethodInfo ___RefreshPreviewChannelSelection;
		private static MethodInfo __RefreshPreviewChannelSelection
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RefreshPreviewChannelSelection ??= __type__?.GetMethodInfoByParameterTypeNames("RefreshPreviewChannelSelection");
		}
	}
}
