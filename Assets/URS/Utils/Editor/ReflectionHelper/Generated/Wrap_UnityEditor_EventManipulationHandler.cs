//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_EventManipulationHandler
	{
		
		/// <summary>
		/// <see cref="UnityEditor.EventManipulationHandler"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.EventManipulationHandler");
		
		
		public UnityEngine.Rect[] m_EventRects
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.Rect[])(__m_EventRects?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventRects?.SetValue(__self__, value);
		}
		
		public static UnityEngine.AnimationEvent[] m_EventsAtMouseDown
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AnimationEvent[])(__m_EventsAtMouseDown?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventsAtMouseDown?.SetValue(null, value);
		}
		
		public static float[] m_EventTimes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float[])(__m_EventTimes?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventTimes?.SetValue(null, value);
		}
		
		public int m_HoverEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__m_HoverEvent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_HoverEvent?.SetValue(__self__, value);
		}
		
		public string m_InstantTooltipText
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_InstantTooltipText?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_InstantTooltipText?.SetValue(__self__, value);
		}
		
		public UnityEngine.Vector2 m_InstantTooltipPoint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.Vector2)(__m_InstantTooltipPoint?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_InstantTooltipPoint?.SetValue(__self__, value);
		}
		
		public bool[] m_EventsSelected
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool[])(__m_EventsSelected?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventsSelected?.SetValue(__self__, value);
		}
		
		public Array m_Events
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (Array)(__m_Events?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Events?.SetValue(__self__, value);
		}
		
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public UnityEditor_AnimationWindowEvent m_Events__GetItem(int i) => new UnityEditor_AnimationWindowEvent(m_Events?.GetValue(i));
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public void m_Events__SetItem(int i, UnityEditor_AnimationWindowEvent value) => m_Events?.SetValue(value.__self__, i);
		
		public object m_Timeline
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__m_Timeline?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Timeline?.SetValue(__self__, value);
		}
		
		public void SelectEvent(UnityEngine.AnimationEvent[] events, int index, UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = events;
			__params__[1] = index;
			__params__[2] = clipInfo.__self__;
			__SelectEvent?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public bool HandleEventManipulation(UnityEngine.Rect rect, ref UnityEngine.AnimationEvent[] events, UnityEditor_AnimationClipInfoProperties clipInfo, float currentTime)
		{
			var __pool__ = FixedArrayPool<object>.Shared(4);
			var __params__ = __pool__.Rent();
			__params__[0] = rect;
			__params__[1] = events;
			__params__[2] = clipInfo.__self__;
			__params__[3] = currentTime;
			var __result__ = __HandleEventManipulation?.Invoke(__self__, __params__);
			events = (UnityEngine.AnimationEvent[])(__params__[1]);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void CreateContextMenu(UnityEditor_AnimationClipInfoProperties info, float time, int eventIndex, bool[] selectedEvents)
		{
			var __pool__ = FixedArrayPool<object>.Shared(4);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__params__[1] = time;
			__params__[2] = eventIndex;
			__params__[3] = selectedEvents;
			__CreateContextMenu?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void EventLineContextMenuAdd(object obj)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = obj;
			__EventLineContextMenuAdd?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void EventLineContextMenuDelete(object obj)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = obj;
			__EventLineContextMenuDelete?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public static void EventLineContextMenuCopy(object obj)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = obj;
			__EventLineContextMenuCopy?.Invoke(null, __params__);
			__pool__.Return(__params__);
		}
		
		public void EventLineContextMenuPaste(object obj)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = obj;
			__EventLineContextMenuPaste?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void CheckRectsOnMouseMove(UnityEngine.Rect eventLineRect, UnityEngine.AnimationEvent[] events, UnityEngine.Rect[] hitRects)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = eventLineRect;
			__params__[1] = events;
			__params__[2] = hitRects;
			__CheckRectsOnMouseMove?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void Draw(UnityEngine.Rect window)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = window;
			__Draw?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public bool DeleteEvents(ref UnityEngine.AnimationEvent[] eventList, bool[] deleteIndices)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = eventList;
			__params__[1] = deleteIndices;
			var __result__ = __DeleteEvents?.Invoke(__self__, __params__);
			eventList = (UnityEngine.AnimationEvent[])(__params__[0]);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public static bool PasteEvents(ref UnityEngine.AnimationEvent[] eventList, ref bool[] selected, float time)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = eventList;
			__params__[1] = selected;
			__params__[2] = time;
			var __result__ = __PasteEvents?.Invoke(null, __params__);
			eventList = (UnityEngine.AnimationEvent[])(__params__[0]);
			selected = (bool[])(__params__[1]);
			__pool__.Return(__params__);
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void EditEvents(UnityEditor_AnimationClipInfoProperties clipInfo, bool[] selectedIndices)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__params__[1] = selectedIndices;
			__EditEvents?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void UpdateEvents(UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__UpdateEvents?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor_EventManipulationHandler(object __self__) => this.__self__ = __self__ as object;
		public object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		
		private static FieldInfo ___m_EventRects;
		private static FieldInfo __m_EventRects
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventRects ??= __type__?.GetField("m_EventRects", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EventsAtMouseDown;
		private static FieldInfo __m_EventsAtMouseDown
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventsAtMouseDown ??= __type__?.GetField("m_EventsAtMouseDown", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EventTimes;
		private static FieldInfo __m_EventTimes
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventTimes ??= __type__?.GetField("m_EventTimes", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_HoverEvent;
		private static FieldInfo __m_HoverEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_HoverEvent ??= __type__?.GetField("m_HoverEvent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_InstantTooltipText;
		private static FieldInfo __m_InstantTooltipText
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_InstantTooltipText ??= __type__?.GetField("m_InstantTooltipText", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_InstantTooltipPoint;
		private static FieldInfo __m_InstantTooltipPoint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_InstantTooltipPoint ??= __type__?.GetField("m_InstantTooltipPoint", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EventsSelected;
		private static FieldInfo __m_EventsSelected
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventsSelected ??= __type__?.GetField("m_EventsSelected", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Events;
		private static FieldInfo __m_Events
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Events ??= __type__?.GetField("m_Events", (BindingFlags)(-1));
		}
		
		private static Type ___E__m_Events;
		public static Type __E__m_Events
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___E__m_Events ??= EditorUtils.GetTypeByFullName("UnityEditor.AnimationWindowEvent");
		}
		
		private static FieldInfo ___m_Timeline;
		private static FieldInfo __m_Timeline
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Timeline ??= __type__?.GetField("m_Timeline", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___SelectEvent;
		private static MethodInfo __SelectEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SelectEvent ??= __type__?.GetMethodInfoByParameterTypeNames("SelectEvent", "UnityEngine.AnimationEvent[]", "System.Int32", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___HandleEventManipulation;
		private static MethodInfo __HandleEventManipulation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HandleEventManipulation ??= __type__?.GetMethodInfoByParameterTypeNames("HandleEventManipulation", "UnityEngine.Rect", "UnityEngine.AnimationEvent[]&", "UnityEditor.AnimationClipInfoProperties", "System.Single");
		}
		
		private static MethodInfo ___CreateContextMenu;
		private static MethodInfo __CreateContextMenu
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CreateContextMenu ??= __type__?.GetMethodInfoByParameterTypeNames("CreateContextMenu", "UnityEditor.AnimationClipInfoProperties", "System.Single", "System.Int32", "System.Boolean[]");
		}
		
		private static MethodInfo ___EventLineContextMenuAdd;
		private static MethodInfo __EventLineContextMenuAdd
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EventLineContextMenuAdd ??= __type__?.GetMethodInfoByParameterTypeNames("EventLineContextMenuAdd", "System.Object");
		}
		
		private static MethodInfo ___EventLineContextMenuDelete;
		private static MethodInfo __EventLineContextMenuDelete
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EventLineContextMenuDelete ??= __type__?.GetMethodInfoByParameterTypeNames("EventLineContextMenuDelete", "System.Object");
		}
		
		private static MethodInfo ___EventLineContextMenuCopy;
		private static MethodInfo __EventLineContextMenuCopy
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EventLineContextMenuCopy ??= __type__?.GetMethodInfoByParameterTypeNames("EventLineContextMenuCopy", "System.Object");
		}
		
		private static MethodInfo ___EventLineContextMenuPaste;
		private static MethodInfo __EventLineContextMenuPaste
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EventLineContextMenuPaste ??= __type__?.GetMethodInfoByParameterTypeNames("EventLineContextMenuPaste", "System.Object");
		}
		
		private static MethodInfo ___CheckRectsOnMouseMove;
		private static MethodInfo __CheckRectsOnMouseMove
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CheckRectsOnMouseMove ??= __type__?.GetMethodInfoByParameterTypeNames("CheckRectsOnMouseMove", "UnityEngine.Rect", "UnityEngine.AnimationEvent[]", "UnityEngine.Rect[]");
		}
		
		private static MethodInfo ___Draw;
		private static MethodInfo __Draw
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___Draw ??= __type__?.GetMethodInfoByParameterTypeNames("Draw", "UnityEngine.Rect");
		}
		
		private static MethodInfo ___DeleteEvents;
		private static MethodInfo __DeleteEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DeleteEvents ??= __type__?.GetMethodInfoByParameterTypeNames("DeleteEvents", "UnityEngine.AnimationEvent[]&", "System.Boolean[]");
		}
		
		private static MethodInfo ___PasteEvents;
		private static MethodInfo __PasteEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___PasteEvents ??= __type__?.GetMethodInfoByParameterTypeNames("PasteEvents", "UnityEngine.AnimationEvent[]&", "System.Boolean[]&", "System.Single");
		}
		
		private static MethodInfo ___EditEvents;
		private static MethodInfo __EditEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EditEvents ??= __type__?.GetMethodInfoByParameterTypeNames("EditEvents", "UnityEditor.AnimationClipInfoProperties", "System.Boolean[]");
		}
		
		private static MethodInfo ___UpdateEvents;
		private static MethodInfo __UpdateEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___UpdateEvents ??= __type__?.GetMethodInfoByParameterTypeNames("UpdateEvents", "UnityEditor.AnimationClipInfoProperties");
		}
	}
}
