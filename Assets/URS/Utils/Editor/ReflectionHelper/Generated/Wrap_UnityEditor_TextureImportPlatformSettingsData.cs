//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_TextureImportPlatformSettingsData
	{
		
		/// <summary>
		/// <see cref="UnityEditor.TextureImportPlatformSettingsData"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.TextureImportPlatformSettingsData");
		
		
		public UnityEditor.TextureImporterPlatformSettings platformTextureSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.TextureImporterPlatformSettings)(__platformTextureSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __platformTextureSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty platformTextureSettingsProp
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__platformTextureSettingsProp?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __platformTextureSettingsProp?.SetValue(__self__, value);
		}
		
		public bool overriddenIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__overriddenIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __overriddenIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty overriddenProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__overriddenProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __overriddenProperty?.SetValue(__self__, value);
		}
		
		public bool allAreOverridden
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__allAreOverridden?.GetValue(__self__));
		}
		
		public bool isDefault
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__isDefault?.GetValue(__self__));
		}
		
		public bool maxTextureSizeIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__maxTextureSizeIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __maxTextureSizeIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty maxTextureSizeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__maxTextureSizeProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __maxTextureSizeProperty?.SetValue(__self__, value);
		}
		
		public bool resizeAlgorithmIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__resizeAlgorithmIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __resizeAlgorithmIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty resizeAlgorithmProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__resizeAlgorithmProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __resizeAlgorithmProperty?.SetValue(__self__, value);
		}
		
		public bool textureCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__textureCompressionIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __textureCompressionIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty textureCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__textureCompressionProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __textureCompressionProperty?.SetValue(__self__, value);
		}
		
		public bool compressionQualityIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__compressionQualityIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __compressionQualityIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty compressionQualityProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__compressionQualityProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __compressionQualityProperty?.SetValue(__self__, value);
		}
		
		public bool crunchedCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__crunchedCompressionIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __crunchedCompressionIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty crunchedCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__crunchedCompressionProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __crunchedCompressionProperty?.SetValue(__self__, value);
		}
		
		public bool textureFormatIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__textureFormatIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __textureFormatIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty textureFormatProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__textureFormatProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __textureFormatProperty?.SetValue(__self__, value);
		}
		
		public bool allowsAlphaSplitIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__allowsAlphaSplitIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __allowsAlphaSplitIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty alphaSplitProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__alphaSplitProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __alphaSplitProperty?.SetValue(__self__, value);
		}
		
		public bool androidETC2FallbackOverrideIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__androidETC2FallbackOverrideIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __androidETC2FallbackOverrideIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty androidETC2FallbackOverrideProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__androidETC2FallbackOverrideProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __androidETC2FallbackOverrideProperty?.SetValue(__self__, value);
		}
		
		public UnityEditor.BuildTarget buildTarget
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.BuildTarget)(__buildTarget?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __buildTarget?.SetValue(__self__, value);
		}
		
		public bool forceMaximumCompressionQuality_BC6H_BC7
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__forceMaximumCompressionQuality_BC6H_BC7?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __forceMaximumCompressionQuality_BC6H_BC7?.SetValue(__self__, value);
		}
		
		public UnityEditor.TextureImporterPlatformSettings m_PlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.TextureImporterPlatformSettings)(__m_PlatformSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_PlatformSettings?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_SerializedPlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_SerializedPlatformSettings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_SerializedPlatformSettings?.SetValue(__self__, value);
		}
		
		public bool m_OverriddenIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_OverriddenIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_OverriddenIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_OverriddenProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_OverriddenProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_OverriddenProperty?.SetValue(__self__, value);
		}
		
		public bool m_MaxTextureSizeIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_MaxTextureSizeIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaxTextureSizeIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MaxTextureSizeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MaxTextureSizeProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaxTextureSizeProperty?.SetValue(__self__, value);
		}
		
		public bool m_ResizeAlgorithmIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_ResizeAlgorithmIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ResizeAlgorithmIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ResizeAlgorithmProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ResizeAlgorithmProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ResizeAlgorithmProperty?.SetValue(__self__, value);
		}
		
		public bool m_TextureCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_TextureCompressionIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureCompressionIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_TextureCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TextureCompressionProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureCompressionProperty?.SetValue(__self__, value);
		}
		
		public bool m_CompressionQualityIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_CompressionQualityIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CompressionQualityIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_CompressionQualityProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_CompressionQualityProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CompressionQualityProperty?.SetValue(__self__, value);
		}
		
		public bool m_CrunchedCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_CrunchedCompressionIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CrunchedCompressionIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_CrunchedCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_CrunchedCompressionProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CrunchedCompressionProperty?.SetValue(__self__, value);
		}
		
		public bool m_TextureFormatIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_TextureFormatIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureFormatIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_TextureFormatProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TextureFormatProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TextureFormatProperty?.SetValue(__self__, value);
		}
		
		public bool m_AlphaSplitIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_AlphaSplitIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AlphaSplitIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AlphaSplitProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AlphaSplitProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AlphaSplitProperty?.SetValue(__self__, value);
		}
		
		public bool m_AndroidETC2FallbackOverrideIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_AndroidETC2FallbackOverrideIsDifferent?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AndroidETC2FallbackOverrideIsDifferent?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AndroidETC2FallbackOverrideProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AndroidETC2FallbackOverrideProperty?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AndroidETC2FallbackOverrideProperty?.SetValue(__self__, value);
		}
		
		public UnityEditor.BuildTarget m_Target
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.BuildTarget)(__m_Target?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Target?.SetValue(__self__, value);
		}
		
		public bool m_HasChanged
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_HasChanged?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_HasChanged?.SetValue(__self__, value);
		}
		
		public void SetAndroidETC2FallbackOverrideForAll(UnityEditor.AndroidETC2FallbackOverride value)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = value;
			__SetAndroidETC2FallbackOverrideForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetChanged(bool value)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = value;
			__SetChanged?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public bool HasChanged()
		{
			var __result__ = __HasChanged?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void SetOverriddenForAll(bool overridden)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = overridden;
			__SetOverriddenForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetMaxTextureSizeForAll(int maxTextureSize)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = maxTextureSize;
			__SetMaxTextureSizeForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetResizeAlgorithmForAll(UnityEditor.TextureResizeAlgorithm algorithm)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = algorithm;
			__SetResizeAlgorithmForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetTextureCompressionForAll(UnityEditor.TextureImporterCompression textureCompression)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = textureCompression;
			__SetTextureCompressionForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetCompressionQualityForAll(int quality)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = quality;
			__SetCompressionQualityForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetCrunchedCompressionForAll(bool crunched)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = crunched;
			__SetCrunchedCompressionForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetTextureFormatForAll(UnityEditor.TextureImporterFormat format)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = format;
			__SetTextureFormatForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void GetValidTextureFormatsAndStrings(UnityEditor.TextureImporterType textureType, out int[] formatValues, out string[] formatStrings)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = textureType;
			__params__[1] = null;
			__params__[2] = null;
			__GetValidTextureFormatsAndStrings?.Invoke(__self__, __params__);
			formatValues = (int[])(__params__[1]);
			formatStrings = (string[])(__params__[2]);
			__pool__.Return(__params__);
		}
		
		public void SetAllowsAlphaSplitForAll(bool value)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = value;
			__SetAllowsAlphaSplitForAll?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor_TextureImportPlatformSettingsData(object __self__) => this.__self__ = __self__ as object;
		public object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		
		private static FieldInfo ___m_PlatformSettings;
		private static FieldInfo __m_PlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_PlatformSettings ??= __type__?.GetField("m_PlatformSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_SerializedPlatformSettings;
		private static FieldInfo __m_SerializedPlatformSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_SerializedPlatformSettings ??= __type__?.GetField("m_SerializedPlatformSettings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_OverriddenIsDifferent;
		private static FieldInfo __m_OverriddenIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_OverriddenIsDifferent ??= __type__?.GetField("m_OverriddenIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_OverriddenProperty;
		private static FieldInfo __m_OverriddenProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_OverriddenProperty ??= __type__?.GetField("m_OverriddenProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaxTextureSizeIsDifferent;
		private static FieldInfo __m_MaxTextureSizeIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaxTextureSizeIsDifferent ??= __type__?.GetField("m_MaxTextureSizeIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaxTextureSizeProperty;
		private static FieldInfo __m_MaxTextureSizeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaxTextureSizeProperty ??= __type__?.GetField("m_MaxTextureSizeProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ResizeAlgorithmIsDifferent;
		private static FieldInfo __m_ResizeAlgorithmIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ResizeAlgorithmIsDifferent ??= __type__?.GetField("m_ResizeAlgorithmIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ResizeAlgorithmProperty;
		private static FieldInfo __m_ResizeAlgorithmProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ResizeAlgorithmProperty ??= __type__?.GetField("m_ResizeAlgorithmProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureCompressionIsDifferent;
		private static FieldInfo __m_TextureCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureCompressionIsDifferent ??= __type__?.GetField("m_TextureCompressionIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureCompressionProperty;
		private static FieldInfo __m_TextureCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureCompressionProperty ??= __type__?.GetField("m_TextureCompressionProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CompressionQualityIsDifferent;
		private static FieldInfo __m_CompressionQualityIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CompressionQualityIsDifferent ??= __type__?.GetField("m_CompressionQualityIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CompressionQualityProperty;
		private static FieldInfo __m_CompressionQualityProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CompressionQualityProperty ??= __type__?.GetField("m_CompressionQualityProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CrunchedCompressionIsDifferent;
		private static FieldInfo __m_CrunchedCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CrunchedCompressionIsDifferent ??= __type__?.GetField("m_CrunchedCompressionIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CrunchedCompressionProperty;
		private static FieldInfo __m_CrunchedCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CrunchedCompressionProperty ??= __type__?.GetField("m_CrunchedCompressionProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureFormatIsDifferent;
		private static FieldInfo __m_TextureFormatIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureFormatIsDifferent ??= __type__?.GetField("m_TextureFormatIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TextureFormatProperty;
		private static FieldInfo __m_TextureFormatProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TextureFormatProperty ??= __type__?.GetField("m_TextureFormatProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AlphaSplitIsDifferent;
		private static FieldInfo __m_AlphaSplitIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AlphaSplitIsDifferent ??= __type__?.GetField("m_AlphaSplitIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AlphaSplitProperty;
		private static FieldInfo __m_AlphaSplitProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AlphaSplitProperty ??= __type__?.GetField("m_AlphaSplitProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AndroidETC2FallbackOverrideIsDifferent;
		private static FieldInfo __m_AndroidETC2FallbackOverrideIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AndroidETC2FallbackOverrideIsDifferent ??= __type__?.GetField("m_AndroidETC2FallbackOverrideIsDifferent", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AndroidETC2FallbackOverrideProperty;
		private static FieldInfo __m_AndroidETC2FallbackOverrideProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AndroidETC2FallbackOverrideProperty ??= __type__?.GetField("m_AndroidETC2FallbackOverrideProperty", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Target;
		private static FieldInfo __m_Target
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Target ??= __type__?.GetField("m_Target", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_HasChanged;
		private static FieldInfo __m_HasChanged
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_HasChanged ??= __type__?.GetField("m_HasChanged", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___platformTextureSettings;
		private static PropertyInfo __platformTextureSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___platformTextureSettings ??= __type__?.GetProperty("platformTextureSettings", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___platformTextureSettingsProp;
		private static PropertyInfo __platformTextureSettingsProp
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___platformTextureSettingsProp ??= __type__?.GetProperty("platformTextureSettingsProp", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___overriddenIsDifferent;
		private static PropertyInfo __overriddenIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___overriddenIsDifferent ??= __type__?.GetProperty("overriddenIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___overriddenProperty;
		private static PropertyInfo __overriddenProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___overriddenProperty ??= __type__?.GetProperty("overriddenProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___allAreOverridden;
		private static PropertyInfo __allAreOverridden
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___allAreOverridden ??= __type__?.GetProperty("allAreOverridden", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___isDefault;
		private static PropertyInfo __isDefault
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___isDefault ??= __type__?.GetProperty("isDefault", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maxTextureSizeIsDifferent;
		private static PropertyInfo __maxTextureSizeIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maxTextureSizeIsDifferent ??= __type__?.GetProperty("maxTextureSizeIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maxTextureSizeProperty;
		private static PropertyInfo __maxTextureSizeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maxTextureSizeProperty ??= __type__?.GetProperty("maxTextureSizeProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___resizeAlgorithmIsDifferent;
		private static PropertyInfo __resizeAlgorithmIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___resizeAlgorithmIsDifferent ??= __type__?.GetProperty("resizeAlgorithmIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___resizeAlgorithmProperty;
		private static PropertyInfo __resizeAlgorithmProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___resizeAlgorithmProperty ??= __type__?.GetProperty("resizeAlgorithmProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureCompressionIsDifferent;
		private static PropertyInfo __textureCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureCompressionIsDifferent ??= __type__?.GetProperty("textureCompressionIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureCompressionProperty;
		private static PropertyInfo __textureCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureCompressionProperty ??= __type__?.GetProperty("textureCompressionProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___compressionQualityIsDifferent;
		private static PropertyInfo __compressionQualityIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___compressionQualityIsDifferent ??= __type__?.GetProperty("compressionQualityIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___compressionQualityProperty;
		private static PropertyInfo __compressionQualityProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___compressionQualityProperty ??= __type__?.GetProperty("compressionQualityProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___crunchedCompressionIsDifferent;
		private static PropertyInfo __crunchedCompressionIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___crunchedCompressionIsDifferent ??= __type__?.GetProperty("crunchedCompressionIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___crunchedCompressionProperty;
		private static PropertyInfo __crunchedCompressionProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___crunchedCompressionProperty ??= __type__?.GetProperty("crunchedCompressionProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureFormatIsDifferent;
		private static PropertyInfo __textureFormatIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureFormatIsDifferent ??= __type__?.GetProperty("textureFormatIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___textureFormatProperty;
		private static PropertyInfo __textureFormatProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___textureFormatProperty ??= __type__?.GetProperty("textureFormatProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___allowsAlphaSplitIsDifferent;
		private static PropertyInfo __allowsAlphaSplitIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___allowsAlphaSplitIsDifferent ??= __type__?.GetProperty("allowsAlphaSplitIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___alphaSplitProperty;
		private static PropertyInfo __alphaSplitProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___alphaSplitProperty ??= __type__?.GetProperty("alphaSplitProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___androidETC2FallbackOverrideIsDifferent;
		private static PropertyInfo __androidETC2FallbackOverrideIsDifferent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___androidETC2FallbackOverrideIsDifferent ??= __type__?.GetProperty("androidETC2FallbackOverrideIsDifferent", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___androidETC2FallbackOverrideProperty;
		private static PropertyInfo __androidETC2FallbackOverrideProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___androidETC2FallbackOverrideProperty ??= __type__?.GetProperty("androidETC2FallbackOverrideProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___buildTarget;
		private static PropertyInfo __buildTarget
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___buildTarget ??= __type__?.GetProperty("buildTarget", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___forceMaximumCompressionQuality_BC6H_BC7;
		private static PropertyInfo __forceMaximumCompressionQuality_BC6H_BC7
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___forceMaximumCompressionQuality_BC6H_BC7 ??= __type__?.GetProperty("forceMaximumCompressionQuality_BC6H_BC7", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___SetAndroidETC2FallbackOverrideForAll;
		private static MethodInfo __SetAndroidETC2FallbackOverrideForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetAndroidETC2FallbackOverrideForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetAndroidETC2FallbackOverrideForAll", "UnityEditor.AndroidETC2FallbackOverride");
		}
		
		private static MethodInfo ___SetChanged;
		private static MethodInfo __SetChanged
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetChanged ??= __type__?.GetMethodInfoByParameterTypeNames("SetChanged", "System.Boolean");
		}
		
		private static MethodInfo ___HasChanged;
		private static MethodInfo __HasChanged
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HasChanged ??= __type__?.GetMethodInfoByParameterTypeNames("HasChanged");
		}
		
		private static MethodInfo ___SetOverriddenForAll;
		private static MethodInfo __SetOverriddenForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetOverriddenForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetOverriddenForAll", "System.Boolean");
		}
		
		private static MethodInfo ___SetMaxTextureSizeForAll;
		private static MethodInfo __SetMaxTextureSizeForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetMaxTextureSizeForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetMaxTextureSizeForAll", "System.Int32");
		}
		
		private static MethodInfo ___SetResizeAlgorithmForAll;
		private static MethodInfo __SetResizeAlgorithmForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetResizeAlgorithmForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetResizeAlgorithmForAll", "UnityEditor.TextureResizeAlgorithm");
		}
		
		private static MethodInfo ___SetTextureCompressionForAll;
		private static MethodInfo __SetTextureCompressionForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetTextureCompressionForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetTextureCompressionForAll", "UnityEditor.TextureImporterCompression");
		}
		
		private static MethodInfo ___SetCompressionQualityForAll;
		private static MethodInfo __SetCompressionQualityForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetCompressionQualityForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetCompressionQualityForAll", "System.Int32");
		}
		
		private static MethodInfo ___SetCrunchedCompressionForAll;
		private static MethodInfo __SetCrunchedCompressionForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetCrunchedCompressionForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetCrunchedCompressionForAll", "System.Boolean");
		}
		
		private static MethodInfo ___SetTextureFormatForAll;
		private static MethodInfo __SetTextureFormatForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetTextureFormatForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetTextureFormatForAll", "UnityEditor.TextureImporterFormat");
		}
		
		private static MethodInfo ___GetValidTextureFormatsAndStrings;
		private static MethodInfo __GetValidTextureFormatsAndStrings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetValidTextureFormatsAndStrings ??= __type__?.GetMethodInfoByParameterTypeNames("GetValidTextureFormatsAndStrings", "UnityEditor.TextureImporterType", "System.Int32[]&", "System.String[]&");
		}
		
		private static MethodInfo ___SetAllowsAlphaSplitForAll;
		private static MethodInfo __SetAllowsAlphaSplitForAll
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetAllowsAlphaSplitForAll ??= __type__?.GetMethodInfoByParameterTypeNames("SetAllowsAlphaSplitForAll", "System.Boolean");
		}
	}
}
