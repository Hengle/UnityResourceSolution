//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_ModelImporterClipEditor
	{
		
		/// <summary>
		/// <see cref="UnityEditor.ModelImporterClipEditor"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.ModelImporterClipEditor");
		
		
		public UnityEditor.ModelImporter singleImporter
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.ModelImporter)(__singleImporter?.GetValue(__self__));
		}
		
		public string selectedClipName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__selectedClipName?.GetValue(__self__));
		}
		
		public int motionNodeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__motionNodeIndex?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __motionNodeIndex?.SetValue(__self__, value);
		}
		
		public int pivotNodeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__pivotNodeIndex?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __pivotNodeIndex?.SetValue(__self__, value);
		}
		
		public string[] referenceTransformPaths
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string[])(__referenceTransformPaths?.GetValue(__self__));
		}
		
		public UnityEditor.ModelImporterAnimationType animationType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.ModelImporterAnimationType)(__animationType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __animationType?.SetValue(__self__, value);
		}
		
		public UnityEditor.ModelImporterGenerateAnimations legacyGenerateAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.ModelImporterGenerateAnimations)(__legacyGenerateAnimations?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __legacyGenerateAnimations?.SetValue(__self__, value);
		}
		
		public UnityEditor_AnimationClipEditor m_AnimationClipEditor
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => new UnityEditor_AnimationClipEditor(__m_AnimationClipEditor?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationClipEditor?.SetValue(__self__, value.__self__);
		}
		
		public static string ActiveClipIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__ActiveClipIndex?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __ActiveClipIndex?.SetValue(null, value);
		}
		
		public UnityEditor.SerializedObject m_DefaultClipsSerializedObject
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedObject)(__m_DefaultClipsSerializedObject?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DefaultClipsSerializedObject?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationType?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ImportAnimation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ImportAnimation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ImportAnimation?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ClipAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ClipAnimations?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ClipAnimations?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_BakeSimulation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_BakeSimulation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_BakeSimulation?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ResampleCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ResampleCurves?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ResampleCurves?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationCompression
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationCompression?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationCompression?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationRotationError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationRotationError?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationRotationError?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationPositionError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationPositionError?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationPositionError?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationScaleError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationScaleError?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationScaleError?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationWrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationWrapMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationWrapMode?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LegacyGenerateAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LegacyGenerateAnimations?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LegacyGenerateAnimations?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ImportAnimatedCustomProperties
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ImportAnimatedCustomProperties?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ImportAnimatedCustomProperties?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_ImportConstraints
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_ImportConstraints?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ImportConstraints?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MotionNodeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MotionNodeName?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MotionNodeName?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_RemoveConstantScaleCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_RemoveConstantScaleCurves?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_RemoveConstantScaleCurves?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_RigImportErrors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_RigImportErrors?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_RigImportErrors?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_RigImportWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_RigImportWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_RigImportWarnings?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationImportErrors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationImportErrors?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationImportErrors?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationImportWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationImportWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationImportWarnings?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationRetargetingWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationRetargetingWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationRetargetingWarnings?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AnimationDoRetargetingWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AnimationDoRetargetingWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AnimationDoRetargetingWarnings?.SetValue(__self__, value);
		}
		
		public string m_Errors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_Errors?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Errors?.SetValue(__self__, value);
		}
		
		public string m_Warnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_Warnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Warnings?.SetValue(__self__, value);
		}
		
		public string m_RigWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_RigWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_RigWarnings?.SetValue(__self__, value);
		}
		
		public string m_RetargetWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__m_RetargetWarnings?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_RetargetWarnings?.SetValue(__self__, value);
		}
		
		public UnityEngine.GUIContent[] m_MotionNodeList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.GUIContent[])(__m_MotionNodeList?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MotionNodeList?.SetValue(__self__, value);
		}
		
		public static bool s_MotionNodeFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__s_MotionNodeFoldout?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_MotionNodeFoldout?.SetValue(null, value);
		}
		
		public static bool s_ImportMessageFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__s_ImportMessageFoldout?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_ImportMessageFoldout?.SetValue(null, value);
		}
		
		public UnityEditorInternal.ReorderableList m_ClipList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditorInternal.ReorderableList)(__m_ClipList?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ClipList?.SetValue(__self__, value);
		}
		
		public static object styles
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__styles?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __styles?.SetValue(null, value);
		}
		
		public static int kFrameColumnWidth
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kFrameColumnWidth?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kFrameColumnWidth?.SetValue(null, value);
		}
		
		public UnityEngine.AvatarMask m_Mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AvatarMask)(__m_Mask?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Mask?.SetValue(__self__, value);
		}
		
		public object m_MaskInspector
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__m_MaskInspector?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaskInspector?.SetValue(__self__, value);
		}
		
		public static bool m_MaskFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_MaskFoldout?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaskFoldout?.SetValue(null, value);
		}
		
		public void OnEnable()
		{
			__OnEnable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void SyncClipEditor(UnityEditor_AnimationClipInfoProperties info)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__SyncClipEditor?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetupDefaultClips()
		{
			__SetupDefaultClips?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void PatchDefaultClipTakeNamesToSplitClipNames()
		{
			__PatchDefaultClipTakeNamesToSplitClipNames?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void TransferDefaultClipsToCustomClips()
		{
			__TransferDefaultClipsToCustomClips?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnDestroy()
		{
			__OnDestroy?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnDisable()
		{
			__OnDisable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void ResetValues()
		{
			__ResetValues?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void AnimationClipGUI()
		{
			__AnimationClipGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnInspectorGUI()
		{
			__OnInspectorGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void AnimationSettings()
		{
			__AnimationSettings?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void RootMotionNodeSettings()
		{
			__RootMotionNodeSettings?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void DestroyEditorsAndData()
		{
			__DestroyEditorsAndData?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void SelectClip(int selected)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = selected;
			__SelectClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void UpdateList()
		{
			__UpdateList?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void AddClipInList(UnityEditorInternal.ReorderableList list)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = list;
			__AddClipInList?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void RemoveClipInList(UnityEditorInternal.ReorderableList list)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = list;
			__RemoveClipInList?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SelectClipInList(UnityEditorInternal.ReorderableList list)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = list;
			__SelectClipInList?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void DrawClipElement(UnityEngine.Rect rect, int index, bool selected, bool focused)
		{
			var __pool__ = FixedArrayPool<object>.Shared(4);
			var __params__ = __pool__.Rent();
			__params__[0] = rect;
			__params__[1] = index;
			__params__[2] = selected;
			__params__[3] = focused;
			__DrawClipElement?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void DrawClipHeader(UnityEngine.Rect rect)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = rect;
			__DrawClipHeader?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void AnimationSplitTable()
		{
			__AnimationSplitTable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool HasPreviewGUI()
		{
			var __result__ = __HasPreviewGUI?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void OnPreviewSettings()
		{
			__OnPreviewSettings?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool IsDeprecatedMultiAnimationRootImport()
		{
			var __result__ = __IsDeprecatedMultiAnimationRootImport?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void OnInteractivePreviewGUI(UnityEngine.Rect r, UnityEngine.GUIStyle background)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = r;
			__params__[1] = background;
			__OnInteractivePreviewGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor_AnimationClipInfoProperties GetSelectedClipInfo()
		{
			var __result__ = __GetSelectedClipInfo?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? new UnityEditor_AnimationClipInfoProperties(__result__) : default;
		}
		
		public string RemoveDuplicateSuffix(string name, out int number)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = name;
			__params__[1] = null;
			var __result__ = __RemoveDuplicateSuffix?.Invoke(__self__, __params__);
			number = (int)(__params__[1]);
			__pool__.Return(__params__);
			return __result__ != null ? (string)(__result__) : default;
		}
		
		public string FindNextAvailableName(string baseName, System.Collections.Generic.HashSet<string> allClipNames)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = baseName;
			__params__[1] = allClipNames;
			var __result__ = __FindNextAvailableName?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (string)(__result__) : default;
		}
		
		public string MakeUniqueClipName(string name, System.Collections.Generic.HashSet<string> allClipNames)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = name;
			__params__[1] = allClipNames;
			var __result__ = __MakeUniqueClipName?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (string)(__result__) : default;
		}
		
		public void RemoveClip(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__RemoveClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetupTakeNameAndFrames(UnityEditor_AnimationClipInfoProperties info, UnityEditor.TakeInfo takeInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__params__[1] = takeInfo;
			__SetupTakeNameAndFrames?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void AddClip(UnityEditor.TakeInfo takeInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = takeInfo;
			__AddClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void InitAnimationClipInfoProperties(UnityEditor_AnimationClipInfoProperties info, UnityEditor.TakeInfo takeInfo, string uniqueIdentifier, int clipOffset)
		{
			var __pool__ = FixedArrayPool<object>.Shared(4);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__params__[1] = takeInfo;
			__params__[2] = uniqueIdentifier;
			__params__[3] = clipOffset;
			__InitAnimationClipInfoProperties?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void AvatarMaskSettings(UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__AvatarMaskSettings?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void InitMask(UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__InitMask?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetTransformMaskFromReference(UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__SetTransformMaskFromReference?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetBodyMaskDefaultValues(UnityEditor_AnimationClipInfoProperties clipInfo)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clipInfo.__self__;
			__SetBodyMaskDefaultValues?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void RegisterListeners()
		{
			__RegisterListeners?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void UnregisterListeners()
		{
			__UnregisterListeners?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void HandleUndo()
		{
			__HandleUndo?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void DeserializeClips()
		{
			__DeserializeClips?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public UnityEditor_ModelImporterClipEditor(object __self__) => this.__self__ = __self__ as object;
		public object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		public UnityEditor_BaseAssetImporterTabUI __super__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => new UnityEditor_BaseAssetImporterTabUI(__self__);
		}
		
		private static FieldInfo ___m_AnimationClipEditor;
		private static FieldInfo __m_AnimationClipEditor
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationClipEditor ??= __type__?.GetField("m_AnimationClipEditor", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___ActiveClipIndex;
		private static FieldInfo __ActiveClipIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ActiveClipIndex ??= __type__?.GetField("ActiveClipIndex", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DefaultClipsSerializedObject;
		private static FieldInfo __m_DefaultClipsSerializedObject
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DefaultClipsSerializedObject ??= __type__?.GetField("m_DefaultClipsSerializedObject", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationType;
		private static FieldInfo __m_AnimationType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationType ??= __type__?.GetField("m_AnimationType", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ImportAnimation;
		private static FieldInfo __m_ImportAnimation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ImportAnimation ??= __type__?.GetField("m_ImportAnimation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ClipAnimations;
		private static FieldInfo __m_ClipAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ClipAnimations ??= __type__?.GetField("m_ClipAnimations", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_BakeSimulation;
		private static FieldInfo __m_BakeSimulation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_BakeSimulation ??= __type__?.GetField("m_BakeSimulation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ResampleCurves;
		private static FieldInfo __m_ResampleCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ResampleCurves ??= __type__?.GetField("m_ResampleCurves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationCompression;
		private static FieldInfo __m_AnimationCompression
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationCompression ??= __type__?.GetField("m_AnimationCompression", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationRotationError;
		private static FieldInfo __m_AnimationRotationError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationRotationError ??= __type__?.GetField("m_AnimationRotationError", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationPositionError;
		private static FieldInfo __m_AnimationPositionError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationPositionError ??= __type__?.GetField("m_AnimationPositionError", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationScaleError;
		private static FieldInfo __m_AnimationScaleError
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationScaleError ??= __type__?.GetField("m_AnimationScaleError", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationWrapMode;
		private static FieldInfo __m_AnimationWrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationWrapMode ??= __type__?.GetField("m_AnimationWrapMode", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LegacyGenerateAnimations;
		private static FieldInfo __m_LegacyGenerateAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LegacyGenerateAnimations ??= __type__?.GetField("m_LegacyGenerateAnimations", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ImportAnimatedCustomProperties;
		private static FieldInfo __m_ImportAnimatedCustomProperties
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ImportAnimatedCustomProperties ??= __type__?.GetField("m_ImportAnimatedCustomProperties", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ImportConstraints;
		private static FieldInfo __m_ImportConstraints
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ImportConstraints ??= __type__?.GetField("m_ImportConstraints", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MotionNodeName;
		private static FieldInfo __m_MotionNodeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MotionNodeName ??= __type__?.GetField("m_MotionNodeName", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_RemoveConstantScaleCurves;
		private static FieldInfo __m_RemoveConstantScaleCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_RemoveConstantScaleCurves ??= __type__?.GetField("m_RemoveConstantScaleCurves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_RigImportErrors;
		private static FieldInfo __m_RigImportErrors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_RigImportErrors ??= __type__?.GetField("m_RigImportErrors", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_RigImportWarnings;
		private static FieldInfo __m_RigImportWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_RigImportWarnings ??= __type__?.GetField("m_RigImportWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationImportErrors;
		private static FieldInfo __m_AnimationImportErrors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationImportErrors ??= __type__?.GetField("m_AnimationImportErrors", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationImportWarnings;
		private static FieldInfo __m_AnimationImportWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationImportWarnings ??= __type__?.GetField("m_AnimationImportWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationRetargetingWarnings;
		private static FieldInfo __m_AnimationRetargetingWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationRetargetingWarnings ??= __type__?.GetField("m_AnimationRetargetingWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AnimationDoRetargetingWarnings;
		private static FieldInfo __m_AnimationDoRetargetingWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AnimationDoRetargetingWarnings ??= __type__?.GetField("m_AnimationDoRetargetingWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Errors;
		private static FieldInfo __m_Errors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Errors ??= __type__?.GetField("m_Errors", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Warnings;
		private static FieldInfo __m_Warnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Warnings ??= __type__?.GetField("m_Warnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_RigWarnings;
		private static FieldInfo __m_RigWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_RigWarnings ??= __type__?.GetField("m_RigWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_RetargetWarnings;
		private static FieldInfo __m_RetargetWarnings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_RetargetWarnings ??= __type__?.GetField("m_RetargetWarnings", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MotionNodeList;
		private static FieldInfo __m_MotionNodeList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MotionNodeList ??= __type__?.GetField("m_MotionNodeList", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_MotionNodeFoldout;
		private static FieldInfo __s_MotionNodeFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_MotionNodeFoldout ??= __type__?.GetField("s_MotionNodeFoldout", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_ImportMessageFoldout;
		private static FieldInfo __s_ImportMessageFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_ImportMessageFoldout ??= __type__?.GetField("s_ImportMessageFoldout", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ClipList;
		private static FieldInfo __m_ClipList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ClipList ??= __type__?.GetField("m_ClipList", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___styles;
		private static FieldInfo __styles
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___styles ??= __type__?.GetField("styles", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kFrameColumnWidth;
		private static FieldInfo __kFrameColumnWidth
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kFrameColumnWidth ??= __type__?.GetField("kFrameColumnWidth", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Mask;
		private static FieldInfo __m_Mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Mask ??= __type__?.GetField("m_Mask", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaskInspector;
		private static FieldInfo __m_MaskInspector
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaskInspector ??= __type__?.GetField("m_MaskInspector", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaskFoldout;
		private static FieldInfo __m_MaskFoldout
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaskFoldout ??= __type__?.GetField("m_MaskFoldout", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___singleImporter;
		private static PropertyInfo __singleImporter
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___singleImporter ??= __type__?.GetProperty("singleImporter", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___selectedClipName;
		private static PropertyInfo __selectedClipName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___selectedClipName ??= __type__?.GetProperty("selectedClipName", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___motionNodeIndex;
		private static PropertyInfo __motionNodeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___motionNodeIndex ??= __type__?.GetProperty("motionNodeIndex", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___pivotNodeIndex;
		private static PropertyInfo __pivotNodeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___pivotNodeIndex ??= __type__?.GetProperty("pivotNodeIndex", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___referenceTransformPaths;
		private static PropertyInfo __referenceTransformPaths
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___referenceTransformPaths ??= __type__?.GetProperty("referenceTransformPaths", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___animationType;
		private static PropertyInfo __animationType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___animationType ??= __type__?.GetProperty("animationType", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___legacyGenerateAnimations;
		private static PropertyInfo __legacyGenerateAnimations
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___legacyGenerateAnimations ??= __type__?.GetProperty("legacyGenerateAnimations", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___OnEnable;
		private static MethodInfo __OnEnable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnEnable ??= __type__?.GetMethodInfoByParameterTypeNames("OnEnable");
		}
		
		private static MethodInfo ___SyncClipEditor;
		private static MethodInfo __SyncClipEditor
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SyncClipEditor ??= __type__?.GetMethodInfoByParameterTypeNames("SyncClipEditor", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___SetupDefaultClips;
		private static MethodInfo __SetupDefaultClips
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetupDefaultClips ??= __type__?.GetMethodInfoByParameterTypeNames("SetupDefaultClips");
		}
		
		private static MethodInfo ___PatchDefaultClipTakeNamesToSplitClipNames;
		private static MethodInfo __PatchDefaultClipTakeNamesToSplitClipNames
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___PatchDefaultClipTakeNamesToSplitClipNames ??= __type__?.GetMethodInfoByParameterTypeNames("PatchDefaultClipTakeNamesToSplitClipNames");
		}
		
		private static MethodInfo ___TransferDefaultClipsToCustomClips;
		private static MethodInfo __TransferDefaultClipsToCustomClips
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___TransferDefaultClipsToCustomClips ??= __type__?.GetMethodInfoByParameterTypeNames("TransferDefaultClipsToCustomClips");
		}
		
		private static MethodInfo ___OnDestroy;
		private static MethodInfo __OnDestroy
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnDestroy ??= __type__?.GetMethodInfoByParameterTypeNames("OnDestroy");
		}
		
		private static MethodInfo ___OnDisable;
		private static MethodInfo __OnDisable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnDisable ??= __type__?.GetMethodInfoByParameterTypeNames("OnDisable");
		}
		
		private static MethodInfo ___ResetValues;
		private static MethodInfo __ResetValues
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ResetValues ??= __type__?.GetMethodInfoByParameterTypeNames("ResetValues");
		}
		
		private static MethodInfo ___AnimationClipGUI;
		private static MethodInfo __AnimationClipGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AnimationClipGUI ??= __type__?.GetMethodInfoByParameterTypeNames("AnimationClipGUI");
		}
		
		private static MethodInfo ___OnInspectorGUI;
		private static MethodInfo __OnInspectorGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnInspectorGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnInspectorGUI");
		}
		
		private static MethodInfo ___AnimationSettings;
		private static MethodInfo __AnimationSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AnimationSettings ??= __type__?.GetMethodInfoByParameterTypeNames("AnimationSettings");
		}
		
		private static MethodInfo ___RootMotionNodeSettings;
		private static MethodInfo __RootMotionNodeSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RootMotionNodeSettings ??= __type__?.GetMethodInfoByParameterTypeNames("RootMotionNodeSettings");
		}
		
		private static MethodInfo ___DestroyEditorsAndData;
		private static MethodInfo __DestroyEditorsAndData
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DestroyEditorsAndData ??= __type__?.GetMethodInfoByParameterTypeNames("DestroyEditorsAndData");
		}
		
		private static MethodInfo ___SelectClip;
		private static MethodInfo __SelectClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SelectClip ??= __type__?.GetMethodInfoByParameterTypeNames("SelectClip", "System.Int32");
		}
		
		private static MethodInfo ___UpdateList;
		private static MethodInfo __UpdateList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___UpdateList ??= __type__?.GetMethodInfoByParameterTypeNames("UpdateList");
		}
		
		private static MethodInfo ___AddClipInList;
		private static MethodInfo __AddClipInList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AddClipInList ??= __type__?.GetMethodInfoByParameterTypeNames("AddClipInList", "UnityEditorInternal.ReorderableList");
		}
		
		private static MethodInfo ___RemoveClipInList;
		private static MethodInfo __RemoveClipInList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RemoveClipInList ??= __type__?.GetMethodInfoByParameterTypeNames("RemoveClipInList", "UnityEditorInternal.ReorderableList");
		}
		
		private static MethodInfo ___SelectClipInList;
		private static MethodInfo __SelectClipInList
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SelectClipInList ??= __type__?.GetMethodInfoByParameterTypeNames("SelectClipInList", "UnityEditorInternal.ReorderableList");
		}
		
		private static MethodInfo ___DrawClipElement;
		private static MethodInfo __DrawClipElement
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DrawClipElement ??= __type__?.GetMethodInfoByParameterTypeNames("DrawClipElement", "UnityEngine.Rect", "System.Int32", "System.Boolean", "System.Boolean");
		}
		
		private static MethodInfo ___DrawClipHeader;
		private static MethodInfo __DrawClipHeader
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DrawClipHeader ??= __type__?.GetMethodInfoByParameterTypeNames("DrawClipHeader", "UnityEngine.Rect");
		}
		
		private static MethodInfo ___AnimationSplitTable;
		private static MethodInfo __AnimationSplitTable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AnimationSplitTable ??= __type__?.GetMethodInfoByParameterTypeNames("AnimationSplitTable");
		}
		
		private static MethodInfo ___HasPreviewGUI;
		private static MethodInfo __HasPreviewGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HasPreviewGUI ??= __type__?.GetMethodInfoByParameterTypeNames("HasPreviewGUI");
		}
		
		private static MethodInfo ___OnPreviewSettings;
		private static MethodInfo __OnPreviewSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnPreviewSettings ??= __type__?.GetMethodInfoByParameterTypeNames("OnPreviewSettings");
		}
		
		private static MethodInfo ___IsDeprecatedMultiAnimationRootImport;
		private static MethodInfo __IsDeprecatedMultiAnimationRootImport
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___IsDeprecatedMultiAnimationRootImport ??= __type__?.GetMethodInfoByParameterTypeNames("IsDeprecatedMultiAnimationRootImport");
		}
		
		private static MethodInfo ___OnInteractivePreviewGUI;
		private static MethodInfo __OnInteractivePreviewGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnInteractivePreviewGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnInteractivePreviewGUI", "UnityEngine.Rect", "UnityEngine.GUIStyle");
		}
		
		private static MethodInfo ___GetSelectedClipInfo;
		private static MethodInfo __GetSelectedClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetSelectedClipInfo ??= __type__?.GetMethodInfoByParameterTypeNames("GetSelectedClipInfo");
		}
		
		private static MethodInfo ___RemoveDuplicateSuffix;
		private static MethodInfo __RemoveDuplicateSuffix
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RemoveDuplicateSuffix ??= __type__?.GetMethodInfoByParameterTypeNames("RemoveDuplicateSuffix", "System.String", "System.Int32&");
		}
		
		private static MethodInfo ___FindNextAvailableName;
		private static MethodInfo __FindNextAvailableName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___FindNextAvailableName ??= __type__?.GetMethodInfoByParameterTypeNames("FindNextAvailableName", "System.String", "System.Collections.Generic.HashSet`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]");
		}
		
		private static MethodInfo ___MakeUniqueClipName;
		private static MethodInfo __MakeUniqueClipName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MakeUniqueClipName ??= __type__?.GetMethodInfoByParameterTypeNames("MakeUniqueClipName", "System.String", "System.Collections.Generic.HashSet`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]");
		}
		
		private static MethodInfo ___RemoveClip;
		private static MethodInfo __RemoveClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RemoveClip ??= __type__?.GetMethodInfoByParameterTypeNames("RemoveClip", "System.Int32");
		}
		
		private static MethodInfo ___SetupTakeNameAndFrames;
		private static MethodInfo __SetupTakeNameAndFrames
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetupTakeNameAndFrames ??= __type__?.GetMethodInfoByParameterTypeNames("SetupTakeNameAndFrames", "UnityEditor.AnimationClipInfoProperties", "UnityEditor.TakeInfo");
		}
		
		private static MethodInfo ___AddClip;
		private static MethodInfo __AddClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AddClip ??= __type__?.GetMethodInfoByParameterTypeNames("AddClip", "UnityEditor.TakeInfo");
		}
		
		private static MethodInfo ___InitAnimationClipInfoProperties;
		private static MethodInfo __InitAnimationClipInfoProperties
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___InitAnimationClipInfoProperties ??= __type__?.GetMethodInfoByParameterTypeNames("InitAnimationClipInfoProperties", "UnityEditor.AnimationClipInfoProperties", "UnityEditor.TakeInfo", "System.String", "System.Int32");
		}
		
		private static MethodInfo ___AvatarMaskSettings;
		private static MethodInfo __AvatarMaskSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AvatarMaskSettings ??= __type__?.GetMethodInfoByParameterTypeNames("AvatarMaskSettings", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___InitMask;
		private static MethodInfo __InitMask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___InitMask ??= __type__?.GetMethodInfoByParameterTypeNames("InitMask", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___SetTransformMaskFromReference;
		private static MethodInfo __SetTransformMaskFromReference
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetTransformMaskFromReference ??= __type__?.GetMethodInfoByParameterTypeNames("SetTransformMaskFromReference", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___SetBodyMaskDefaultValues;
		private static MethodInfo __SetBodyMaskDefaultValues
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetBodyMaskDefaultValues ??= __type__?.GetMethodInfoByParameterTypeNames("SetBodyMaskDefaultValues", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___RegisterListeners;
		private static MethodInfo __RegisterListeners
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RegisterListeners ??= __type__?.GetMethodInfoByParameterTypeNames("RegisterListeners");
		}
		
		private static MethodInfo ___UnregisterListeners;
		private static MethodInfo __UnregisterListeners
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___UnregisterListeners ??= __type__?.GetMethodInfoByParameterTypeNames("UnregisterListeners");
		}
		
		private static MethodInfo ___HandleUndo;
		private static MethodInfo __HandleUndo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HandleUndo ??= __type__?.GetMethodInfoByParameterTypeNames("HandleUndo");
		}
		
		private static MethodInfo ___DeserializeClips;
		private static MethodInfo __DeserializeClips
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DeserializeClips ??= __type__?.GetMethodInfoByParameterTypeNames("DeserializeClips");
		}
	}
}
