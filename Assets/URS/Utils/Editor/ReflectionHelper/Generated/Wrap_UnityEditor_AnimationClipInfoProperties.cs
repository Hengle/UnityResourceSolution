//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_AnimationClipInfoProperties
	{
		
		/// <summary>
		/// <see cref="UnityEditor.AnimationClipInfoProperties"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.AnimationClipInfoProperties");
		
		
		public string name
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__name?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __name?.SetValue(__self__, value);
		}
		
		public string takeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__takeName?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __takeName?.SetValue(__self__, value);
		}
		
		public long internalID
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (long)(__internalID?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __internalID?.SetValue(__self__, value);
		}
		
		public float firstFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__firstFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __firstFrame?.SetValue(__self__, value);
		}
		
		public float lastFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__lastFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __lastFrame?.SetValue(__self__, value);
		}
		
		public int wrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__wrapMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __wrapMode?.SetValue(__self__, value);
		}
		
		public bool loop
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loop?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loop?.SetValue(__self__, value);
		}
		
		public float orientationOffsetY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__orientationOffsetY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __orientationOffsetY?.SetValue(__self__, value);
		}
		
		public float level
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__level?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __level?.SetValue(__self__, value);
		}
		
		public float cycleOffset
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__cycleOffset?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __cycleOffset?.SetValue(__self__, value);
		}
		
		public float additiveReferencePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__additiveReferencePoseFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __additiveReferencePoseFrame?.SetValue(__self__, value);
		}
		
		public bool hasAdditiveReferencePose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__hasAdditiveReferencePose?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __hasAdditiveReferencePose?.SetValue(__self__, value);
		}
		
		public bool loopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loopTime?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loopTime?.SetValue(__self__, value);
		}
		
		public bool loopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loopBlend?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loopBlend?.SetValue(__self__, value);
		}
		
		public bool loopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loopBlendOrientation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loopBlendOrientation?.SetValue(__self__, value);
		}
		
		public bool loopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loopBlendPositionY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loopBlendPositionY?.SetValue(__self__, value);
		}
		
		public bool loopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__loopBlendPositionXZ?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __loopBlendPositionXZ?.SetValue(__self__, value);
		}
		
		public bool keepOriginalOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__keepOriginalOrientation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __keepOriginalOrientation?.SetValue(__self__, value);
		}
		
		public bool keepOriginalPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__keepOriginalPositionY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __keepOriginalPositionY?.SetValue(__self__, value);
		}
		
		public bool keepOriginalPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__keepOriginalPositionXZ?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __keepOriginalPositionXZ?.SetValue(__self__, value);
		}
		
		public bool heightFromFeet
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__heightFromFeet?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __heightFromFeet?.SetValue(__self__, value);
		}
		
		public bool mirror
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__mirror?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __mirror?.SetValue(__self__, value);
		}
		
		public UnityEditor.ClipAnimationMaskType maskType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.ClipAnimationMaskType)(__maskType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __maskType?.SetValue(__self__, value);
		}
		
		public UnityEngine.AvatarMask maskSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AvatarMask)(__maskSource?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __maskSource?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty maskTypeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__maskTypeProperty?.GetValue(__self__));
		}
		
		public UnityEditor.SerializedProperty maskSourceProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__maskSourceProperty?.GetValue(__self__));
		}
		
		public UnityEditor.SerializedProperty bodyMaskProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__bodyMaskProperty?.GetValue(__self__));
		}
		
		public UnityEditor.SerializedProperty transformMaskProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__transformMaskProperty?.GetValue(__self__));
		}
		
		public UnityEditor.SerializedProperty m_Property
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Property?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Property?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Name
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Name?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Name?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_TakeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TakeName?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TakeName?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_InternalId
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_InternalId?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_InternalId?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_FirstFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_FirstFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FirstFrame?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LastFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LastFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LastFrame?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_WrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_WrapMode?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_WrapMode?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Loop
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Loop?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Loop?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_OrientationOffsetY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_OrientationOffsetY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_OrientationOffsetY?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Level
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Level?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Level?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_CycleOffset
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_CycleOffset?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_CycleOffset?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_AdditiveReferencePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_AdditiveReferencePoseFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AdditiveReferencePoseFrame?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_HasAdditiveReferencePose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_HasAdditiveReferencePose?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_HasAdditiveReferencePose?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LoopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LoopTime?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopTime?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LoopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LoopBlend?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlend?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LoopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LoopBlendOrientation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendOrientation?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LoopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LoopBlendPositionY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendPositionY?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_LoopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_LoopBlendPositionXZ?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendPositionXZ?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_KeepOriginalOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_KeepOriginalOrientation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_KeepOriginalOrientation?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_KeepOriginalPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_KeepOriginalPositionY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_KeepOriginalPositionY?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_KeepOriginalPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_KeepOriginalPositionXZ?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_KeepOriginalPositionXZ?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_HeightFromFeet
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_HeightFromFeet?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_HeightFromFeet?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Mirror
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Mirror?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Mirror?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MaskType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MaskType?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaskType?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_MaskSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_MaskSource?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_MaskSource?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_BodyMask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_BodyMask?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_BodyMask?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_TransformMask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_TransformMask?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TransformMask?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Curves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Curves?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Curves?.SetValue(__self__, value);
		}
		
		public UnityEditor.SerializedProperty m_Events
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.SerializedProperty)(__m_Events?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Events?.SetValue(__self__, value);
		}
		
		public void ApplyModifiedProperties()
		{
			__ApplyModifiedProperties?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool MaskNeedsUpdating()
		{
			var __result__ = __MaskNeedsUpdating?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void MaskFromClip(UnityEngine.AvatarMask mask)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = mask;
			__MaskFromClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void MaskToClip(UnityEngine.AvatarMask mask)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = mask;
			__MaskToClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ClearCurves()
		{
			__ClearCurves?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public int GetCurveCount()
		{
			var __result__ = __GetCurveCount?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (int)(__result__) : default;
		}
		
		public UnityEditor.SerializedProperty GetCurveProperty(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			var __result__ = __GetCurveProperty?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (UnityEditor.SerializedProperty)(__result__) : default;
		}
		
		public string GetCurveName(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			var __result__ = __GetCurveName?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (string)(__result__) : default;
		}
		
		public void SetCurveName(int index, string name)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__params__[1] = name;
			__SetCurveName?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEngine.AnimationCurve GetCurve(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			var __result__ = __GetCurve?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (UnityEngine.AnimationCurve)(__result__) : default;
		}
		
		public void SetCurve(int index, UnityEngine.AnimationCurve curveValue)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__params__[1] = curveValue;
			__SetCurve?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void AddCurve()
		{
			__AddCurve?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void RemoveCurve(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__RemoveCurve?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEngine.AnimationEvent GetEvent(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			var __result__ = __GetEvent?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (UnityEngine.AnimationEvent)(__result__) : default;
		}
		
		public void SetEvent(int index, UnityEngine.AnimationEvent animationEvent)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__params__[1] = animationEvent;
			__SetEvent?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ClearEvents()
		{
			__ClearEvents?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public int GetEventCount()
		{
			var __result__ = __GetEventCount?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (int)(__result__) : default;
		}
		
		public void AddEvent(float time)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = time;
			__AddEvent?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void RemoveEvent(int index)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = index;
			__RemoveEvent?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void SetEvents(UnityEngine.AnimationEvent[] newEvents)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = newEvents;
			__SetEvents?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEngine.AnimationEvent[] GetEvents()
		{
			var __result__ = __GetEvents?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (UnityEngine.AnimationEvent[])(__result__) : default;
		}
		
		public void AssignToPreviewClip(UnityEngine.AnimationClip clip)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clip;
			__AssignToPreviewClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public float FixPrecisionErrors(float f)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = f;
			var __result__ = __FixPrecisionErrors?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
			return __result__ != null ? (float)(__result__) : default;
		}
		
		public void ExtractFromPreviewClip(UnityEngine.AnimationClip clip)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clip;
			__ExtractFromPreviewClip?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor_AnimationClipInfoProperties(object __self__) => this.__self__ = __self__ as object;
		public object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		
		private static FieldInfo ___m_Property;
		private static FieldInfo __m_Property
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Property ??= __type__?.GetField("m_Property", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Name;
		private static FieldInfo __m_Name
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Name ??= __type__?.GetField("m_Name", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TakeName;
		private static FieldInfo __m_TakeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TakeName ??= __type__?.GetField("m_TakeName", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_InternalId;
		private static FieldInfo __m_InternalId
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_InternalId ??= __type__?.GetField("m_InternalId", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FirstFrame;
		private static FieldInfo __m_FirstFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FirstFrame ??= __type__?.GetField("m_FirstFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LastFrame;
		private static FieldInfo __m_LastFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LastFrame ??= __type__?.GetField("m_LastFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_WrapMode;
		private static FieldInfo __m_WrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_WrapMode ??= __type__?.GetField("m_WrapMode", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Loop;
		private static FieldInfo __m_Loop
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Loop ??= __type__?.GetField("m_Loop", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_OrientationOffsetY;
		private static FieldInfo __m_OrientationOffsetY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_OrientationOffsetY ??= __type__?.GetField("m_OrientationOffsetY", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Level;
		private static FieldInfo __m_Level
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Level ??= __type__?.GetField("m_Level", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_CycleOffset;
		private static FieldInfo __m_CycleOffset
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_CycleOffset ??= __type__?.GetField("m_CycleOffset", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AdditiveReferencePoseFrame;
		private static FieldInfo __m_AdditiveReferencePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AdditiveReferencePoseFrame ??= __type__?.GetField("m_AdditiveReferencePoseFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_HasAdditiveReferencePose;
		private static FieldInfo __m_HasAdditiveReferencePose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_HasAdditiveReferencePose ??= __type__?.GetField("m_HasAdditiveReferencePose", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopTime;
		private static FieldInfo __m_LoopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopTime ??= __type__?.GetField("m_LoopTime", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlend;
		private static FieldInfo __m_LoopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlend ??= __type__?.GetField("m_LoopBlend", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendOrientation;
		private static FieldInfo __m_LoopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendOrientation ??= __type__?.GetField("m_LoopBlendOrientation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendPositionY;
		private static FieldInfo __m_LoopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendPositionY ??= __type__?.GetField("m_LoopBlendPositionY", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendPositionXZ;
		private static FieldInfo __m_LoopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendPositionXZ ??= __type__?.GetField("m_LoopBlendPositionXZ", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_KeepOriginalOrientation;
		private static FieldInfo __m_KeepOriginalOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_KeepOriginalOrientation ??= __type__?.GetField("m_KeepOriginalOrientation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_KeepOriginalPositionY;
		private static FieldInfo __m_KeepOriginalPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_KeepOriginalPositionY ??= __type__?.GetField("m_KeepOriginalPositionY", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_KeepOriginalPositionXZ;
		private static FieldInfo __m_KeepOriginalPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_KeepOriginalPositionXZ ??= __type__?.GetField("m_KeepOriginalPositionXZ", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_HeightFromFeet;
		private static FieldInfo __m_HeightFromFeet
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_HeightFromFeet ??= __type__?.GetField("m_HeightFromFeet", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Mirror;
		private static FieldInfo __m_Mirror
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Mirror ??= __type__?.GetField("m_Mirror", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaskType;
		private static FieldInfo __m_MaskType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaskType ??= __type__?.GetField("m_MaskType", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_MaskSource;
		private static FieldInfo __m_MaskSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_MaskSource ??= __type__?.GetField("m_MaskSource", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_BodyMask;
		private static FieldInfo __m_BodyMask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_BodyMask ??= __type__?.GetField("m_BodyMask", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TransformMask;
		private static FieldInfo __m_TransformMask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TransformMask ??= __type__?.GetField("m_TransformMask", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Curves;
		private static FieldInfo __m_Curves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Curves ??= __type__?.GetField("m_Curves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Events;
		private static FieldInfo __m_Events
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Events ??= __type__?.GetField("m_Events", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___name;
		private static PropertyInfo __name
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___name ??= __type__?.GetProperty("name", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___takeName;
		private static PropertyInfo __takeName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___takeName ??= __type__?.GetProperty("takeName", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___internalID;
		private static PropertyInfo __internalID
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___internalID ??= __type__?.GetProperty("internalID", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___firstFrame;
		private static PropertyInfo __firstFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___firstFrame ??= __type__?.GetProperty("firstFrame", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___lastFrame;
		private static PropertyInfo __lastFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___lastFrame ??= __type__?.GetProperty("lastFrame", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___wrapMode;
		private static PropertyInfo __wrapMode
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___wrapMode ??= __type__?.GetProperty("wrapMode", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loop;
		private static PropertyInfo __loop
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loop ??= __type__?.GetProperty("loop", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___orientationOffsetY;
		private static PropertyInfo __orientationOffsetY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___orientationOffsetY ??= __type__?.GetProperty("orientationOffsetY", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___level;
		private static PropertyInfo __level
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___level ??= __type__?.GetProperty("level", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___cycleOffset;
		private static PropertyInfo __cycleOffset
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___cycleOffset ??= __type__?.GetProperty("cycleOffset", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___additiveReferencePoseFrame;
		private static PropertyInfo __additiveReferencePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___additiveReferencePoseFrame ??= __type__?.GetProperty("additiveReferencePoseFrame", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___hasAdditiveReferencePose;
		private static PropertyInfo __hasAdditiveReferencePose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___hasAdditiveReferencePose ??= __type__?.GetProperty("hasAdditiveReferencePose", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loopTime;
		private static PropertyInfo __loopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loopTime ??= __type__?.GetProperty("loopTime", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loopBlend;
		private static PropertyInfo __loopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loopBlend ??= __type__?.GetProperty("loopBlend", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loopBlendOrientation;
		private static PropertyInfo __loopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loopBlendOrientation ??= __type__?.GetProperty("loopBlendOrientation", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loopBlendPositionY;
		private static PropertyInfo __loopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loopBlendPositionY ??= __type__?.GetProperty("loopBlendPositionY", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___loopBlendPositionXZ;
		private static PropertyInfo __loopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___loopBlendPositionXZ ??= __type__?.GetProperty("loopBlendPositionXZ", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___keepOriginalOrientation;
		private static PropertyInfo __keepOriginalOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___keepOriginalOrientation ??= __type__?.GetProperty("keepOriginalOrientation", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___keepOriginalPositionY;
		private static PropertyInfo __keepOriginalPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___keepOriginalPositionY ??= __type__?.GetProperty("keepOriginalPositionY", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___keepOriginalPositionXZ;
		private static PropertyInfo __keepOriginalPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___keepOriginalPositionXZ ??= __type__?.GetProperty("keepOriginalPositionXZ", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___heightFromFeet;
		private static PropertyInfo __heightFromFeet
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___heightFromFeet ??= __type__?.GetProperty("heightFromFeet", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___mirror;
		private static PropertyInfo __mirror
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___mirror ??= __type__?.GetProperty("mirror", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maskType;
		private static PropertyInfo __maskType
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maskType ??= __type__?.GetProperty("maskType", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maskSource;
		private static PropertyInfo __maskSource
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maskSource ??= __type__?.GetProperty("maskSource", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maskTypeProperty;
		private static PropertyInfo __maskTypeProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maskTypeProperty ??= __type__?.GetProperty("maskTypeProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___maskSourceProperty;
		private static PropertyInfo __maskSourceProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___maskSourceProperty ??= __type__?.GetProperty("maskSourceProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___bodyMaskProperty;
		private static PropertyInfo __bodyMaskProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___bodyMaskProperty ??= __type__?.GetProperty("bodyMaskProperty", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___transformMaskProperty;
		private static PropertyInfo __transformMaskProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___transformMaskProperty ??= __type__?.GetProperty("transformMaskProperty", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___ApplyModifiedProperties;
		private static MethodInfo __ApplyModifiedProperties
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ApplyModifiedProperties ??= __type__?.GetMethodInfoByParameterTypeNames("ApplyModifiedProperties");
		}
		
		private static MethodInfo ___MaskNeedsUpdating;
		private static MethodInfo __MaskNeedsUpdating
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MaskNeedsUpdating ??= __type__?.GetMethodInfoByParameterTypeNames("MaskNeedsUpdating");
		}
		
		private static MethodInfo ___MaskFromClip;
		private static MethodInfo __MaskFromClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MaskFromClip ??= __type__?.GetMethodInfoByParameterTypeNames("MaskFromClip", "UnityEngine.AvatarMask");
		}
		
		private static MethodInfo ___MaskToClip;
		private static MethodInfo __MaskToClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MaskToClip ??= __type__?.GetMethodInfoByParameterTypeNames("MaskToClip", "UnityEngine.AvatarMask");
		}
		
		private static MethodInfo ___ClearCurves;
		private static MethodInfo __ClearCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ClearCurves ??= __type__?.GetMethodInfoByParameterTypeNames("ClearCurves");
		}
		
		private static MethodInfo ___GetCurveCount;
		private static MethodInfo __GetCurveCount
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetCurveCount ??= __type__?.GetMethodInfoByParameterTypeNames("GetCurveCount");
		}
		
		private static MethodInfo ___GetCurveProperty;
		private static MethodInfo __GetCurveProperty
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetCurveProperty ??= __type__?.GetMethodInfoByParameterTypeNames("GetCurveProperty", "System.Int32");
		}
		
		private static MethodInfo ___GetCurveName;
		private static MethodInfo __GetCurveName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetCurveName ??= __type__?.GetMethodInfoByParameterTypeNames("GetCurveName", "System.Int32");
		}
		
		private static MethodInfo ___SetCurveName;
		private static MethodInfo __SetCurveName
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetCurveName ??= __type__?.GetMethodInfoByParameterTypeNames("SetCurveName", "System.Int32", "System.String");
		}
		
		private static MethodInfo ___GetCurve;
		private static MethodInfo __GetCurve
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetCurve ??= __type__?.GetMethodInfoByParameterTypeNames("GetCurve", "System.Int32");
		}
		
		private static MethodInfo ___SetCurve;
		private static MethodInfo __SetCurve
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetCurve ??= __type__?.GetMethodInfoByParameterTypeNames("SetCurve", "System.Int32", "UnityEngine.AnimationCurve");
		}
		
		private static MethodInfo ___AddCurve;
		private static MethodInfo __AddCurve
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AddCurve ??= __type__?.GetMethodInfoByParameterTypeNames("AddCurve");
		}
		
		private static MethodInfo ___RemoveCurve;
		private static MethodInfo __RemoveCurve
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RemoveCurve ??= __type__?.GetMethodInfoByParameterTypeNames("RemoveCurve", "System.Int32");
		}
		
		private static MethodInfo ___GetEvent;
		private static MethodInfo __GetEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetEvent ??= __type__?.GetMethodInfoByParameterTypeNames("GetEvent", "System.Int32");
		}
		
		private static MethodInfo ___SetEvent;
		private static MethodInfo __SetEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetEvent ??= __type__?.GetMethodInfoByParameterTypeNames("SetEvent", "System.Int32", "UnityEngine.AnimationEvent");
		}
		
		private static MethodInfo ___ClearEvents;
		private static MethodInfo __ClearEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ClearEvents ??= __type__?.GetMethodInfoByParameterTypeNames("ClearEvents");
		}
		
		private static MethodInfo ___GetEventCount;
		private static MethodInfo __GetEventCount
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetEventCount ??= __type__?.GetMethodInfoByParameterTypeNames("GetEventCount");
		}
		
		private static MethodInfo ___AddEvent;
		private static MethodInfo __AddEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AddEvent ??= __type__?.GetMethodInfoByParameterTypeNames("AddEvent", "System.Single");
		}
		
		private static MethodInfo ___RemoveEvent;
		private static MethodInfo __RemoveEvent
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___RemoveEvent ??= __type__?.GetMethodInfoByParameterTypeNames("RemoveEvent", "System.Int32");
		}
		
		private static MethodInfo ___SetEvents;
		private static MethodInfo __SetEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetEvents ??= __type__?.GetMethodInfoByParameterTypeNames("SetEvents", "UnityEngine.AnimationEvent[]");
		}
		
		private static MethodInfo ___GetEvents;
		private static MethodInfo __GetEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetEvents ??= __type__?.GetMethodInfoByParameterTypeNames("GetEvents");
		}
		
		private static MethodInfo ___AssignToPreviewClip;
		private static MethodInfo __AssignToPreviewClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AssignToPreviewClip ??= __type__?.GetMethodInfoByParameterTypeNames("AssignToPreviewClip", "UnityEngine.AnimationClip");
		}
		
		private static MethodInfo ___FixPrecisionErrors;
		private static MethodInfo __FixPrecisionErrors
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___FixPrecisionErrors ??= __type__?.GetMethodInfoByParameterTypeNames("FixPrecisionErrors", "System.Single");
		}
		
		private static MethodInfo ___ExtractFromPreviewClip;
		private static MethodInfo __ExtractFromPreviewClip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ExtractFromPreviewClip ??= __type__?.GetMethodInfoByParameterTypeNames("ExtractFromPreviewClip", "UnityEngine.AnimationClip");
		}
	}
}
