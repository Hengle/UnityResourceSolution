//This file was automatically generated by kuroneko.
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace NinjaBeats.ReflectionHelper
{
	public partial struct UnityEditor_AnimationClipEditor
	{
		
		/// <summary>
		/// <see cref="UnityEditor.AnimationClipEditor"/>
		/// </summary>
		public static Type __type__ { get; } = EditorUtils.GetTypeByFullName("UnityEditor.AnimationClipEditor");
		
		
		public UnityEngine.AvatarMask mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AvatarMask)(__mask?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __mask?.SetValue(__self__, value);
		}
		
		public string[] takeNames
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string[])(__takeNames?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __takeNames?.SetValue(__self__, value);
		}
		
		public int takeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__takeIndex?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __takeIndex?.SetValue(__self__, value);
		}
		
		public bool needsToGenerateClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__needsToGenerateClipInfo?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __needsToGenerateClipInfo?.SetValue(__self__, value);
		}
		
		public static string s_LoopMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__s_LoopMeterStr?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopMeterStr?.SetValue(null, value);
		}
		
		public static int s_LoopMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__s_LoopMeterHint?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopMeterHint?.SetValue(null, value);
		}
		
		public static string s_LoopOrientationMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__s_LoopOrientationMeterStr?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopOrientationMeterStr?.SetValue(null, value);
		}
		
		public static int s_LoopOrientationMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__s_LoopOrientationMeterHint?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopOrientationMeterHint?.SetValue(null, value);
		}
		
		public static string s_LoopPositionYMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__s_LoopPositionYMeterStr?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopPositionYMeterStr?.SetValue(null, value);
		}
		
		public static int s_LoopPositionYMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__s_LoopPositionYMeterHint?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopPositionYMeterHint?.SetValue(null, value);
		}
		
		public static string s_LoopPositionXZMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (string)(__s_LoopPositionXZMeterStr?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopPositionXZMeterStr?.SetValue(null, value);
		}
		
		public static int s_LoopPositionXZMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__s_LoopPositionXZMeterHint?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_LoopPositionXZMeterHint?.SetValue(null, value);
		}
		
		public static float s_EventTimelineMax
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__s_EventTimelineMax?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __s_EventTimelineMax?.SetValue(null, value);
		}
		
		public UnityEngine.AvatarMask m_Mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AvatarMask)(__m_Mask?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Mask?.SetValue(__self__, value);
		}
		
		public UnityEditor_AnimationClipInfoProperties m_ClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => new UnityEditor_AnimationClipInfoProperties(__m_ClipInfo?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ClipInfo?.SetValue(__self__, value.__self__);
		}
		
		public UnityEngine.AnimationClip m_Clip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.AnimationClip)(__m_Clip?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Clip?.SetValue(__self__, value);
		}
		
		public UnityEditor.Animations.AnimatorController m_Controller
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.Animations.AnimatorController)(__m_Controller?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_Controller?.SetValue(__self__, value);
		}
		
		public UnityEditor.Animations.AnimatorStateMachine m_StateMachine
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.Animations.AnimatorStateMachine)(__m_StateMachine?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_StateMachine?.SetValue(__self__, value);
		}
		
		public UnityEditor.Animations.AnimatorState m_State
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.Animations.AnimatorState)(__m_State?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_State?.SetValue(__self__, value);
		}
		
		public object m_AvatarPreview
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__m_AvatarPreview?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AvatarPreview?.SetValue(__self__, value);
		}
		
		public object m_TimeArea
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__m_TimeArea?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_TimeArea?.SetValue(__self__, value);
		}
		
		public object m_EventTimeArea
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (object)(__m_EventTimeArea?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventTimeArea?.SetValue(__self__, value);
		}
		
		public bool m_DraggingRange
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_DraggingRange?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingRange?.SetValue(__self__, value);
		}
		
		public bool m_DraggingRangeBegin
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_DraggingRangeBegin?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingRangeBegin?.SetValue(__self__, value);
		}
		
		public bool m_DraggingRangeEnd
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_DraggingRangeEnd?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingRangeEnd?.SetValue(__self__, value);
		}
		
		public float m_DraggingStartFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_DraggingStartFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingStartFrame?.SetValue(__self__, value);
		}
		
		public float m_DraggingStopFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_DraggingStopFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingStopFrame?.SetValue(__self__, value);
		}
		
		public float m_DraggingAdditivePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_DraggingAdditivePoseFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DraggingAdditivePoseFrame?.SetValue(__self__, value);
		}
		
		public bool m_LoopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_LoopTime?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopTime?.SetValue(__self__, value);
		}
		
		public bool m_LoopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_LoopBlend?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlend?.SetValue(__self__, value);
		}
		
		public bool m_LoopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_LoopBlendOrientation?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendOrientation?.SetValue(__self__, value);
		}
		
		public bool m_LoopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_LoopBlendPositionY?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendPositionY?.SetValue(__self__, value);
		}
		
		public bool m_LoopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_LoopBlendPositionXZ?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_LoopBlendPositionXZ?.SetValue(__self__, value);
		}
		
		public float m_StartFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_StartFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_StartFrame?.SetValue(__self__, value);
		}
		
		public float m_StopFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_StopFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_StopFrame?.SetValue(__self__, value);
		}
		
		public float m_AdditivePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_AdditivePoseFrame?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_AdditivePoseFrame?.SetValue(__self__, value);
		}
		
		public float m_InitialClipLength
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (float)(__m_InitialClipLength?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_InitialClipLength?.SetValue(__self__, value);
		}
		
		public static bool m_ShowCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_ShowCurves?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowCurves?.SetValue(null, value);
		}
		
		public UnityEditor_EventManipulationHandler m_EventManipulationHandler
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => new UnityEditor_EventManipulationHandler(__m_EventManipulationHandler?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_EventManipulationHandler?.SetValue(__self__, value.__self__);
		}
		
		public static bool m_ShowEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_ShowEvents?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_ShowEvents?.SetValue(null, value);
		}
		
		public bool m_NeedsToGenerateClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_NeedsToGenerateClipInfo?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_NeedsToGenerateClipInfo?.SetValue(__self__, value);
		}
		
		public static int kSamplesPerSecond
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kSamplesPerSecond?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kSamplesPerSecond?.SetValue(null, value);
		}
		
		public static int kPose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kPose?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kPose?.SetValue(null, value);
		}
		
		public static int kRotation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kRotation?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kRotation?.SetValue(null, value);
		}
		
		public static int kHeight
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kHeight?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kHeight?.SetValue(null, value);
		}
		
		public static int kPosition
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (int)(__kPosition?.GetValue(null));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __kPosition?.SetValue(null, value);
		}
		
		public UnityEngine.Vector2[][][] m_QualityCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEngine.Vector2[][][])(__m_QualityCurves?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_QualityCurves?.SetValue(__self__, value);
		}
		
		public bool m_DirtyQualityCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_DirtyQualityCurves?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_DirtyQualityCurves?.SetValue(__self__, value);
		}
		
		public bool m_FirstInitialization
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (bool)(__m_FirstInitialization?.GetValue(__self__));
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			set => __m_FirstInitialization?.SetValue(__self__, value);
		}
		
		public static void EditWithImporter(UnityEngine.AnimationClip clip)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = clip;
			__EditWithImporter?.Invoke(null, __params__);
			__pool__.Return(__params__);
		}
		
		public void UpdateEventsPopupClipInfo(UnityEditor_AnimationClipInfoProperties info)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__UpdateEventsPopupClipInfo?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ShowRange(UnityEditor_AnimationClipInfoProperties info)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = info.__self__;
			__ShowRange?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void InitController()
		{
			__InitController?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool IsEnabled()
		{
			var __result__ = __IsEnabled?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void OnHeaderIconGUI(UnityEngine.Rect iconRect)
		{
			var __pool__ = FixedArrayPool<object>.Shared(1);
			var __params__ = __pool__.Rent();
			__params__[0] = iconRect;
			__OnHeaderIconGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void OnHeaderTitleGUI(UnityEngine.Rect titleRect, string header)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = titleRect;
			__params__[1] = header;
			__OnHeaderTitleGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void OnHeaderControlsGUI()
		{
			__OnHeaderControlsGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void DestroyController()
		{
			__DestroyController?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void SetPreviewAvatar()
		{
			__SetPreviewAvatar?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void Init()
		{
			__Init?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void InitClipTime()
		{
			__InitClipTime?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnEnable()
		{
			__OnEnable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnDisable()
		{
			__OnDisable?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public bool HasPreviewGUI()
		{
			var __result__ = __HasPreviewGUI?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (bool)(__result__) : default;
		}
		
		public void OnPreviewSettings()
		{
			__OnPreviewSettings?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void CalculateQualityCurves()
		{
			__CalculateQualityCurves?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnInteractivePreviewGUI(UnityEngine.Rect r, UnityEngine.GUIStyle background)
		{
			var __pool__ = FixedArrayPool<object>.Shared(2);
			var __params__ = __pool__.Rent();
			__params__[0] = r;
			__params__[1] = background;
			__OnInteractivePreviewGUI?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public void ClipRangeGUI(ref float startFrame, ref float stopFrame, out bool changedStart, out bool changedStop, bool showAdditivePoseFrame, ref float additivePoseframe, out bool changedAdditivePoseframe)
		{
			var __pool__ = FixedArrayPool<object>.Shared(7);
			var __params__ = __pool__.Rent();
			__params__[0] = startFrame;
			__params__[1] = stopFrame;
			__params__[2] = null;
			__params__[3] = null;
			__params__[4] = showAdditivePoseFrame;
			__params__[5] = additivePoseframe;
			__params__[6] = null;
			__ClipRangeGUI?.Invoke(__self__, __params__);
			startFrame = (float)(__params__[0]);
			stopFrame = (float)(__params__[1]);
			changedStart = (bool)(__params__[2]);
			changedStop = (bool)(__params__[3]);
			additivePoseframe = (float)(__params__[5]);
			changedAdditivePoseframe = (bool)(__params__[6]);
			__pool__.Return(__params__);
		}
		
		public string GetStatsText()
		{
			var __result__ = __GetStatsText?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (string)(__result__) : default;
		}
		
		public float GetClipLength()
		{
			var __result__ = __GetClipLength?.Invoke(__self__, System.Array.Empty<object>());
			return __result__ != null ? (float)(__result__) : default;
		}
		
		public void OnAssetStoreInspectorGUI()
		{
			__OnAssetStoreInspectorGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void OnInspectorGUI()
		{
			__OnInspectorGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void AnimationClipGUI()
		{
			__AnimationClipGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void CurveGUI()
		{
			__CurveGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void EventsGUI()
		{
			__EventsGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void MuscleClipGUI()
		{
			__MuscleClipGUI?.Invoke(__self__, System.Array.Empty<object>());
		}
		
		public void LoopToggle(UnityEngine.Rect r, UnityEngine.GUIContent content, ref bool val)
		{
			var __pool__ = FixedArrayPool<object>.Shared(3);
			var __params__ = __pool__.Rent();
			__params__[0] = r;
			__params__[1] = content;
			__params__[2] = val;
			__LoopToggle?.Invoke(__self__, __params__);
			val = (bool)(__params__[2]);
			__pool__.Return(__params__);
		}
		
		public void LoopQualityLampAndCurve(UnityEngine.Rect position, float value, int lightMeterHint, bool changedStart, bool changedStop, UnityEngine.Vector2[][] curves)
		{
			var __pool__ = FixedArrayPool<object>.Shared(6);
			var __params__ = __pool__.Rent();
			__params__[0] = position;
			__params__[1] = value;
			__params__[2] = lightMeterHint;
			__params__[3] = changedStart;
			__params__[4] = changedStop;
			__params__[5] = curves;
			__LoopQualityLampAndCurve?.Invoke(__self__, __params__);
			__pool__.Return(__params__);
		}
		
		public UnityEditor_AnimationClipEditor(object __self__) => this.__self__ = __self__ as UnityEngine.Object;
		public UnityEngine.Object __self__;
		public bool __valid__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => __self__ != null && __type__ != null;
		}
		public UnityEditor.Editor __super__
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => (UnityEditor.Editor)(__self__);
		}
		
		private static FieldInfo ___s_LoopMeterStr;
		private static FieldInfo __s_LoopMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopMeterStr ??= __type__?.GetField("s_LoopMeterStr", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopMeterHint;
		private static FieldInfo __s_LoopMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopMeterHint ??= __type__?.GetField("s_LoopMeterHint", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopOrientationMeterStr;
		private static FieldInfo __s_LoopOrientationMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopOrientationMeterStr ??= __type__?.GetField("s_LoopOrientationMeterStr", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopOrientationMeterHint;
		private static FieldInfo __s_LoopOrientationMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopOrientationMeterHint ??= __type__?.GetField("s_LoopOrientationMeterHint", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopPositionYMeterStr;
		private static FieldInfo __s_LoopPositionYMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopPositionYMeterStr ??= __type__?.GetField("s_LoopPositionYMeterStr", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopPositionYMeterHint;
		private static FieldInfo __s_LoopPositionYMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopPositionYMeterHint ??= __type__?.GetField("s_LoopPositionYMeterHint", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopPositionXZMeterStr;
		private static FieldInfo __s_LoopPositionXZMeterStr
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopPositionXZMeterStr ??= __type__?.GetField("s_LoopPositionXZMeterStr", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_LoopPositionXZMeterHint;
		private static FieldInfo __s_LoopPositionXZMeterHint
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_LoopPositionXZMeterHint ??= __type__?.GetField("s_LoopPositionXZMeterHint", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___s_EventTimelineMax;
		private static FieldInfo __s_EventTimelineMax
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___s_EventTimelineMax ??= __type__?.GetField("s_EventTimelineMax", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Mask;
		private static FieldInfo __m_Mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Mask ??= __type__?.GetField("m_Mask", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ClipInfo;
		private static FieldInfo __m_ClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ClipInfo ??= __type__?.GetField("m_ClipInfo", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Clip;
		private static FieldInfo __m_Clip
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Clip ??= __type__?.GetField("m_Clip", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_Controller;
		private static FieldInfo __m_Controller
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_Controller ??= __type__?.GetField("m_Controller", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_StateMachine;
		private static FieldInfo __m_StateMachine
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_StateMachine ??= __type__?.GetField("m_StateMachine", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_State;
		private static FieldInfo __m_State
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_State ??= __type__?.GetField("m_State", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AvatarPreview;
		private static FieldInfo __m_AvatarPreview
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AvatarPreview ??= __type__?.GetField("m_AvatarPreview", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_TimeArea;
		private static FieldInfo __m_TimeArea
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_TimeArea ??= __type__?.GetField("m_TimeArea", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EventTimeArea;
		private static FieldInfo __m_EventTimeArea
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventTimeArea ??= __type__?.GetField("m_EventTimeArea", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingRange;
		private static FieldInfo __m_DraggingRange
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingRange ??= __type__?.GetField("m_DraggingRange", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingRangeBegin;
		private static FieldInfo __m_DraggingRangeBegin
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingRangeBegin ??= __type__?.GetField("m_DraggingRangeBegin", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingRangeEnd;
		private static FieldInfo __m_DraggingRangeEnd
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingRangeEnd ??= __type__?.GetField("m_DraggingRangeEnd", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingStartFrame;
		private static FieldInfo __m_DraggingStartFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingStartFrame ??= __type__?.GetField("m_DraggingStartFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingStopFrame;
		private static FieldInfo __m_DraggingStopFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingStopFrame ??= __type__?.GetField("m_DraggingStopFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DraggingAdditivePoseFrame;
		private static FieldInfo __m_DraggingAdditivePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DraggingAdditivePoseFrame ??= __type__?.GetField("m_DraggingAdditivePoseFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopTime;
		private static FieldInfo __m_LoopTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopTime ??= __type__?.GetField("m_LoopTime", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlend;
		private static FieldInfo __m_LoopBlend
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlend ??= __type__?.GetField("m_LoopBlend", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendOrientation;
		private static FieldInfo __m_LoopBlendOrientation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendOrientation ??= __type__?.GetField("m_LoopBlendOrientation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendPositionY;
		private static FieldInfo __m_LoopBlendPositionY
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendPositionY ??= __type__?.GetField("m_LoopBlendPositionY", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_LoopBlendPositionXZ;
		private static FieldInfo __m_LoopBlendPositionXZ
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_LoopBlendPositionXZ ??= __type__?.GetField("m_LoopBlendPositionXZ", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_StartFrame;
		private static FieldInfo __m_StartFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_StartFrame ??= __type__?.GetField("m_StartFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_StopFrame;
		private static FieldInfo __m_StopFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_StopFrame ??= __type__?.GetField("m_StopFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_AdditivePoseFrame;
		private static FieldInfo __m_AdditivePoseFrame
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_AdditivePoseFrame ??= __type__?.GetField("m_AdditivePoseFrame", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_InitialClipLength;
		private static FieldInfo __m_InitialClipLength
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_InitialClipLength ??= __type__?.GetField("m_InitialClipLength", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowCurves;
		private static FieldInfo __m_ShowCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowCurves ??= __type__?.GetField("m_ShowCurves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_EventManipulationHandler;
		private static FieldInfo __m_EventManipulationHandler
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_EventManipulationHandler ??= __type__?.GetField("m_EventManipulationHandler", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_ShowEvents;
		private static FieldInfo __m_ShowEvents
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_ShowEvents ??= __type__?.GetField("m_ShowEvents", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_NeedsToGenerateClipInfo;
		private static FieldInfo __m_NeedsToGenerateClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_NeedsToGenerateClipInfo ??= __type__?.GetField("m_NeedsToGenerateClipInfo", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kSamplesPerSecond;
		private static FieldInfo __kSamplesPerSecond
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kSamplesPerSecond ??= __type__?.GetField("kSamplesPerSecond", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kPose;
		private static FieldInfo __kPose
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kPose ??= __type__?.GetField("kPose", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kRotation;
		private static FieldInfo __kRotation
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kRotation ??= __type__?.GetField("kRotation", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kHeight;
		private static FieldInfo __kHeight
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kHeight ??= __type__?.GetField("kHeight", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___kPosition;
		private static FieldInfo __kPosition
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___kPosition ??= __type__?.GetField("kPosition", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_QualityCurves;
		private static FieldInfo __m_QualityCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_QualityCurves ??= __type__?.GetField("m_QualityCurves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_DirtyQualityCurves;
		private static FieldInfo __m_DirtyQualityCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_DirtyQualityCurves ??= __type__?.GetField("m_DirtyQualityCurves", (BindingFlags)(-1));
		}
		
		private static FieldInfo ___m_FirstInitialization;
		private static FieldInfo __m_FirstInitialization
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___m_FirstInitialization ??= __type__?.GetField("m_FirstInitialization", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___mask;
		private static PropertyInfo __mask
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___mask ??= __type__?.GetProperty("mask", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___takeNames;
		private static PropertyInfo __takeNames
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___takeNames ??= __type__?.GetProperty("takeNames", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___takeIndex;
		private static PropertyInfo __takeIndex
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___takeIndex ??= __type__?.GetProperty("takeIndex", (BindingFlags)(-1));
		}
		
		private static PropertyInfo ___needsToGenerateClipInfo;
		private static PropertyInfo __needsToGenerateClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___needsToGenerateClipInfo ??= __type__?.GetProperty("needsToGenerateClipInfo", (BindingFlags)(-1));
		}
		
		private static MethodInfo ___EditWithImporter;
		private static MethodInfo __EditWithImporter
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EditWithImporter ??= __type__?.GetMethodInfoByParameterTypeNames("EditWithImporter", "UnityEngine.AnimationClip");
		}
		
		private static MethodInfo ___UpdateEventsPopupClipInfo;
		private static MethodInfo __UpdateEventsPopupClipInfo
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___UpdateEventsPopupClipInfo ??= __type__?.GetMethodInfoByParameterTypeNames("UpdateEventsPopupClipInfo", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___ShowRange;
		private static MethodInfo __ShowRange
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ShowRange ??= __type__?.GetMethodInfoByParameterTypeNames("ShowRange", "UnityEditor.AnimationClipInfoProperties");
		}
		
		private static MethodInfo ___InitController;
		private static MethodInfo __InitController
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___InitController ??= __type__?.GetMethodInfoByParameterTypeNames("InitController");
		}
		
		private static MethodInfo ___IsEnabled;
		private static MethodInfo __IsEnabled
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___IsEnabled ??= __type__?.GetMethodInfoByParameterTypeNames("IsEnabled");
		}
		
		private static MethodInfo ___OnHeaderIconGUI;
		private static MethodInfo __OnHeaderIconGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnHeaderIconGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnHeaderIconGUI", "UnityEngine.Rect");
		}
		
		private static MethodInfo ___OnHeaderTitleGUI;
		private static MethodInfo __OnHeaderTitleGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnHeaderTitleGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnHeaderTitleGUI", "UnityEngine.Rect", "System.String");
		}
		
		private static MethodInfo ___OnHeaderControlsGUI;
		private static MethodInfo __OnHeaderControlsGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnHeaderControlsGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnHeaderControlsGUI");
		}
		
		private static MethodInfo ___DestroyController;
		private static MethodInfo __DestroyController
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___DestroyController ??= __type__?.GetMethodInfoByParameterTypeNames("DestroyController");
		}
		
		private static MethodInfo ___SetPreviewAvatar;
		private static MethodInfo __SetPreviewAvatar
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___SetPreviewAvatar ??= __type__?.GetMethodInfoByParameterTypeNames("SetPreviewAvatar");
		}
		
		private static MethodInfo ___Init;
		private static MethodInfo __Init
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___Init ??= __type__?.GetMethodInfoByParameterTypeNames("Init");
		}
		
		private static MethodInfo ___InitClipTime;
		private static MethodInfo __InitClipTime
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___InitClipTime ??= __type__?.GetMethodInfoByParameterTypeNames("InitClipTime");
		}
		
		private static MethodInfo ___OnEnable;
		private static MethodInfo __OnEnable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnEnable ??= __type__?.GetMethodInfoByParameterTypeNames("OnEnable");
		}
		
		private static MethodInfo ___OnDisable;
		private static MethodInfo __OnDisable
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnDisable ??= __type__?.GetMethodInfoByParameterTypeNames("OnDisable");
		}
		
		private static MethodInfo ___HasPreviewGUI;
		private static MethodInfo __HasPreviewGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___HasPreviewGUI ??= __type__?.GetMethodInfoByParameterTypeNames("HasPreviewGUI");
		}
		
		private static MethodInfo ___OnPreviewSettings;
		private static MethodInfo __OnPreviewSettings
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnPreviewSettings ??= __type__?.GetMethodInfoByParameterTypeNames("OnPreviewSettings");
		}
		
		private static MethodInfo ___CalculateQualityCurves;
		private static MethodInfo __CalculateQualityCurves
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CalculateQualityCurves ??= __type__?.GetMethodInfoByParameterTypeNames("CalculateQualityCurves");
		}
		
		private static MethodInfo ___OnInteractivePreviewGUI;
		private static MethodInfo __OnInteractivePreviewGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnInteractivePreviewGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnInteractivePreviewGUI", "UnityEngine.Rect", "UnityEngine.GUIStyle");
		}
		
		private static MethodInfo ___ClipRangeGUI;
		private static MethodInfo __ClipRangeGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___ClipRangeGUI ??= __type__?.GetMethodInfoByParameterTypeNames("ClipRangeGUI", "System.Single&", "System.Single&", "System.Boolean&", "System.Boolean&", "System.Boolean", "System.Single&", "System.Boolean&");
		}
		
		private static MethodInfo ___GetStatsText;
		private static MethodInfo __GetStatsText
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetStatsText ??= __type__?.GetMethodInfoByParameterTypeNames("GetStatsText");
		}
		
		private static MethodInfo ___GetClipLength;
		private static MethodInfo __GetClipLength
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___GetClipLength ??= __type__?.GetMethodInfoByParameterTypeNames("GetClipLength");
		}
		
		private static MethodInfo ___OnAssetStoreInspectorGUI;
		private static MethodInfo __OnAssetStoreInspectorGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnAssetStoreInspectorGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnAssetStoreInspectorGUI");
		}
		
		private static MethodInfo ___OnInspectorGUI;
		private static MethodInfo __OnInspectorGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___OnInspectorGUI ??= __type__?.GetMethodInfoByParameterTypeNames("OnInspectorGUI");
		}
		
		private static MethodInfo ___AnimationClipGUI;
		private static MethodInfo __AnimationClipGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___AnimationClipGUI ??= __type__?.GetMethodInfoByParameterTypeNames("AnimationClipGUI");
		}
		
		private static MethodInfo ___CurveGUI;
		private static MethodInfo __CurveGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___CurveGUI ??= __type__?.GetMethodInfoByParameterTypeNames("CurveGUI");
		}
		
		private static MethodInfo ___EventsGUI;
		private static MethodInfo __EventsGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___EventsGUI ??= __type__?.GetMethodInfoByParameterTypeNames("EventsGUI");
		}
		
		private static MethodInfo ___MuscleClipGUI;
		private static MethodInfo __MuscleClipGUI
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___MuscleClipGUI ??= __type__?.GetMethodInfoByParameterTypeNames("MuscleClipGUI");
		}
		
		private static MethodInfo ___LoopToggle;
		private static MethodInfo __LoopToggle
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___LoopToggle ??= __type__?.GetMethodInfoByParameterTypeNames("LoopToggle", "UnityEngine.Rect", "UnityEngine.GUIContent", "System.Boolean&");
		}
		
		private static MethodInfo ___LoopQualityLampAndCurve;
		private static MethodInfo __LoopQualityLampAndCurve
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get => ___LoopQualityLampAndCurve ??= __type__?.GetMethodInfoByParameterTypeNames("LoopQualityLampAndCurve", "UnityEngine.Rect", "System.Single", "System.Int32", "System.Boolean", "System.Boolean", "UnityEngine.Vector2[][]");
		}
	}
}
